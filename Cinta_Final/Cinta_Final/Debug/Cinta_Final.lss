
Cinta_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000906  0000099a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000906  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000041  0080010a  0080010a  000009a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cb  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  00001cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000875  00000000  00000000  00002767  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e4  00000000  00000000  00002fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000071b  00000000  00000000  000032c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f6  00000000  00000000  000039db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003fd1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <__vector_10>
  2c:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_11>
  30:	0c 94 1b 01 	jmp	0x236	; 0x236 <__vector_12>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 34       	cpi	r26, 0x4B	; 75
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b2 02 	call	0x564	; 0x564 <main>
  9e:	0c 94 81 04 	jmp	0x902	; 0x902 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <HCSR04_AddNew>:

//variable interna estatica
static _sHCSR04Handle *mySensor;		//puntero a la estructura _sHCSR04Handle. Se usa como variable auxiliar para manipular los datos de los sensores ultrasónicos HCSR04.

unsigned int HCSR04_AddNew(void (*WritePin_HCSR04)(uint8_t value), uint32_t ticks)
{
  a6:	cf 92       	push	r12
  a8:	df 92       	push	r13
  aa:	ef 92       	push	r14
  ac:	ff 92       	push	r15
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	ec 01       	movw	r28, r24
  b4:	6a 01       	movw	r12, r20
  b6:	7b 01       	movw	r14, r22
	mySensor = (_sHCSR04Handle *)malloc(sizeof(_sHCSR04Handle));	//myHandleAux almacena un nuevo sensor dinámicamente, por lo que myHandleAux apunta a la nueva estructura creada.
  b8:	8f e0       	ldi	r24, 0x0F	; 15
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 60 03 	call	0x6c0	; 0x6c0 <malloc>
  c0:	fc 01       	movw	r30, r24
  c2:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  c6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

	mySensor->WritePin = WritePin_HCSR04;
  ca:	d1 83       	std	Z+1, r29	; 0x01
  cc:	c0 83       	st	Z, r28
	mySensor->ticks = ticks;
  ce:	c2 86       	std	Z+10, r12	; 0x0a
  d0:	d3 86       	std	Z+11, r13	; 0x0b
  d2:	e4 86       	std	Z+12, r14	; 0x0c
  d4:	f5 86       	std	Z+13, r15	; 0x0d
	mySensor->flags.byte = 0;								
  d6:	16 86       	std	Z+14, r1	; 0x0e
	mySensor->lastDistanceUs = 0;
  d8:	11 86       	std	Z+9, r1	; 0x09
  da:	10 86       	std	Z+8, r1	; 0x08
	mySensor->usTimeRise = 0;
  dc:	15 82       	std	Z+5, r1	; 0x05
  de:	14 82       	std	Z+4, r1	; 0x04
	mySensor->usTimeFall = 0;
  e0:	17 82       	std	Z+7, r1	; 0x07
  e2:	16 82       	std	Z+6, r1	; 0x06
	mySensor->OnReadyMeasure = NULL;	
  e4:	13 82       	std	Z+3, r1	; 0x03
  e6:	12 82       	std	Z+2, r1	; 0x02
	mySensor->WritePin(0);		
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	fe 01       	movw	r30, r28
  ec:	09 95       	icall
	
	return (unsigned int)mySensor;
}
  ee:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  f2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	ff 90       	pop	r15
  fc:	ef 90       	pop	r14
  fe:	df 90       	pop	r13
 100:	cf 90       	pop	r12
 102:	08 95       	ret

00000104 <HCSR04_Start>:
//}


void HCSR04_Start(unsigned int handleHCSR04)
{
	mySensor = (_sHCSR04Handle *)handleHCSR04;
 104:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 108:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	mySensor->WritePin(1);					
 10c:	dc 01       	movw	r26, r24
 10e:	ed 91       	ld	r30, X+
 110:	fc 91       	ld	r31, X
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	09 95       	icall
 116:	08 95       	ret

00000118 <HCSR04_TriggerReady>:
	
}

void HCSR04_TriggerReady(unsigned int handleHCSR04)
{
	mySensor = (_sHCSR04Handle *)handleHCSR04;
 118:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 11c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	
	mySensor->WritePin(0);
 120:	dc 01       	movw	r26, r24
 122:	ed 91       	ld	r30, X+
 124:	fc 91       	ld	r31, X
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	09 95       	icall
 12a:	08 95       	ret

0000012c <HCSR04_RiseEdgeTime>:
}

void HCSR04_RiseEdgeTime(unsigned int handleHCSR04, uint16_t usTimeRise)
{
	mySensor = (_sHCSR04Handle *)handleHCSR04;
 12c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 130:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

	mySensor->usTimeRise = usTimeRise;	//Cargo cuando se pone en RISE
 134:	fc 01       	movw	r30, r24
 136:	75 83       	std	Z+5, r23	; 0x05
 138:	64 83       	std	Z+4, r22	; 0x04
	mySensor->flags.byte = 0;
 13a:	16 86       	std	Z+14, r1	; 0x0e
 13c:	08 95       	ret

0000013e <HCSR04_FallEdgeTime>:

}

void HCSR04_FallEdgeTime(unsigned int handleHCSR04, uint16_t usTimeFall)
{
 13e:	fc 01       	movw	r30, r24
	mySensor = (_sHCSR04Handle *)handleHCSR04;
 140:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 144:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>

	mySensor->usTimeFall = usTimeFall;	//Cargo cuando se pone en Fall 
 148:	77 83       	std	Z+7, r23	; 0x07
 14a:	66 83       	std	Z+6, r22	; 0x06
	mySensor->flags.bit.EDGEREADY = 1;
 14c:	86 85       	ldd	r24, Z+14	; 0x0e
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	86 87       	std	Z+14, r24	; 0x0e
 152:	08 95       	ret

00000154 <task_HCSR>:
	
}

void task_HCSR()
{
	if (mySensor != NULL)
 154:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <__data_end>
 158:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <__data_end+0x1>
 15c:	10 97       	sbiw	r26, 0x00	; 0
 15e:	c9 f1       	breq	.+114    	; 0x1d2 <task_HCSR+0x7e>
	{
		if (mySensor->flags.bit.EDGEREADY) //¿el sensor midió? Esto indica que ya se recibieron los dos flancos (rising y falling) y se puede calcular el tiempo que tardó el eco en volver = la distancia.
 160:	1e 96       	adiw	r26, 0x0e	; 14
 162:	8c 91       	ld	r24, X
 164:	1e 97       	sbiw	r26, 0x0e	; 14
 166:	80 ff       	sbrs	r24, 0
 168:	34 c0       	rjmp	.+104    	; 0x1d2 <task_HCSR+0x7e>
		{
			mySensor->flags.byte = 0;
 16a:	1e 96       	adiw	r26, 0x0e	; 14
 16c:	1c 92       	st	X, r1
 16e:	1e 97       	sbiw	r26, 0x0e	; 14
			
			if(mySensor->usTimeRise < mySensor->usTimeFall){ //si no hubo overflow
 170:	14 96       	adiw	r26, 0x04	; 4
 172:	2d 91       	ld	r18, X+
 174:	3c 91       	ld	r19, X
 176:	15 97       	sbiw	r26, 0x05	; 5
 178:	16 96       	adiw	r26, 0x06	; 6
 17a:	8d 91       	ld	r24, X+
 17c:	9c 91       	ld	r25, X
 17e:	17 97       	sbiw	r26, 0x07	; 7
 180:	28 17       	cp	r18, r24
 182:	39 07       	cpc	r19, r25
 184:	38 f4       	brcc	.+14     	; 0x194 <task_HCSR+0x40>
				mySensor->lastDistanceUs = mySensor->usTimeFall - mySensor->usTimeRise; //distancia medida
 186:	82 1b       	sub	r24, r18
 188:	93 0b       	sbc	r25, r19
 18a:	19 96       	adiw	r26, 0x09	; 9
 18c:	9c 93       	st	X, r25
 18e:	8e 93       	st	-X, r24
 190:	18 97       	sbiw	r26, 0x08	; 8
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <task_HCSR+0x4e>
				}else{ //hubo overflow
				mySensor->lastDistanceUs = mySensor->usTimeFall - mySensor->usTimeRise + 0xFFFF; //para corregir
 194:	82 1b       	sub	r24, r18
 196:	93 0b       	sbc	r25, r19
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	19 96       	adiw	r26, 0x09	; 9
 19c:	9c 93       	st	X, r25
 19e:	8e 93       	st	-X, r24
 1a0:	18 97       	sbiw	r26, 0x08	; 8
			}
			
			if(mySensor->lastDistanceUs > 11764) //2 metros
 1a2:	18 96       	adiw	r26, 0x08	; 8
 1a4:	8d 91       	ld	r24, X+
 1a6:	9c 91       	ld	r25, X
 1a8:	19 97       	sbiw	r26, 0x09	; 9
 1aa:	85 3f       	cpi	r24, 0xF5	; 245
 1ac:	9d 42       	sbci	r25, 0x2D	; 45
 1ae:	30 f0       	brcs	.+12     	; 0x1bc <task_HCSR+0x68>
				mySensor->lastDistanceUs = 0xFFFF;
 1b0:	8f ef       	ldi	r24, 0xFF	; 255
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	19 96       	adiw	r26, 0x09	; 9
 1b6:	9c 93       	st	X, r25
 1b8:	8e 93       	st	-X, r24
 1ba:	18 97       	sbiw	r26, 0x08	; 8
			
			if (mySensor->OnReadyMeasure != NULL)
 1bc:	12 96       	adiw	r26, 0x02	; 2
 1be:	ed 91       	ld	r30, X+
 1c0:	fc 91       	ld	r31, X
 1c2:	13 97       	sbiw	r26, 0x03	; 3
 1c4:	30 97       	sbiw	r30, 0x00	; 0
 1c6:	29 f0       	breq	.+10     	; 0x1d2 <task_HCSR+0x7e>
				mySensor->OnReadyMeasure(mySensor->lastDistanceUs);
 1c8:	18 96       	adiw	r26, 0x08	; 8
 1ca:	8d 91       	ld	r24, X+
 1cc:	9c 91       	ld	r25, X
 1ce:	19 97       	sbiw	r26, 0x09	; 9
 1d0:	09 95       	icall
 1d2:	08 95       	ret

000001d4 <HCSR04_AttachOnReadyMeasure>:
	}
}

void HCSR04_AttachOnReadyMeasure(unsigned int handleHCSR04, void (*OnReadyMeasure)(uint16_t distance))
{
	mySensor = (_sHCSR04Handle *)handleHCSR04;
 1d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	mySensor->OnReadyMeasure = OnReadyMeasure;
 1dc:	fc 01       	movw	r30, r24
 1de:	73 83       	std	Z+3, r23	; 0x03
 1e0:	62 83       	std	Z+2, r22	; 0x02
 1e2:	08 95       	ret

000001e4 <WritePin_HCSR>:
	ir->last_sample = sample;
}

uint8_t IR_GetState( IRDebounce *ir) {
	return ir->stateConfirmed;
}
 1e4:	88 23       	and	r24, r24
 1e6:	21 f0       	breq	.+8      	; 0x1f0 <WritePin_HCSR+0xc>
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	82 60       	ori	r24, 0x02	; 2
 1ec:	85 b9       	out	0x05, r24	; 5
 1ee:	08 95       	ret
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	8d 7f       	andi	r24, 0xFD	; 253
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	08 95       	ret

000001f8 <__vector_11>:
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	8f 93       	push	r24
 204:	9f 93       	push	r25
 206:	ef 93       	push	r30
 208:	ff 93       	push	r31
 20a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <flag0>
 20e:	81 60       	ori	r24, 0x01	; 1
 210:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <flag0>
 214:	ea e8       	ldi	r30, 0x8A	; 138
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	91 81       	ldd	r25, Z+1	; 0x01
 21c:	80 5e       	subi	r24, 0xE0	; 224
 21e:	91 4b       	sbci	r25, 0xB1	; 177
 220:	91 83       	std	Z+1, r25	; 0x01
 222:	80 83       	st	Z, r24
 224:	ff 91       	pop	r31
 226:	ef 91       	pop	r30
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <__vector_12>:
 236:	1f 92       	push	r1
 238:	0f 92       	push	r0
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	0f 92       	push	r0
 23e:	11 24       	eor	r1, r1
 240:	2f 93       	push	r18
 242:	3f 93       	push	r19
 244:	4f 93       	push	r20
 246:	5f 93       	push	r21
 248:	6f 93       	push	r22
 24a:	7f 93       	push	r23
 24c:	8f 93       	push	r24
 24e:	9f 93       	push	r25
 250:	af 93       	push	r26
 252:	bf 93       	push	r27
 254:	ef 93       	push	r30
 256:	ff 93       	push	r31
 258:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <HCSR_1>
 25c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <HCSR_1+0x1>
 260:	0e 94 8c 00 	call	0x118	; 0x118 <HCSR04_TriggerReady>
 264:	86 b3       	in	r24, 0x16	; 22
 266:	80 62       	ori	r24, 0x20	; 32
 268:	86 bb       	out	0x16, r24	; 22
 26a:	e1 e8       	ldi	r30, 0x81	; 129
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	80 ec       	ldi	r24, 0xC0	; 192
 270:	80 83       	st	Z, r24
 272:	80 81       	ld	r24, Z
 274:	82 60       	ori	r24, 0x02	; 2
 276:	80 83       	st	Z, r24
 278:	82 e2       	ldi	r24, 0x22	; 34
 27a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <__vector_10>:
 2a0:	1f 92       	push	r1
 2a2:	0f 92       	push	r0
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	0f 92       	push	r0
 2a8:	11 24       	eor	r1, r1
 2aa:	2f 93       	push	r18
 2ac:	3f 93       	push	r19
 2ae:	4f 93       	push	r20
 2b0:	5f 93       	push	r21
 2b2:	6f 93       	push	r22
 2b4:	7f 93       	push	r23
 2b6:	8f 93       	push	r24
 2b8:	9f 93       	push	r25
 2ba:	af 93       	push	r26
 2bc:	bf 93       	push	r27
 2be:	ef 93       	push	r30
 2c0:	ff 93       	push	r31
 2c2:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 2c6:	86 ff       	sbrs	r24, 6
 2c8:	10 c0       	rjmp	.+32     	; 0x2ea <__vector_10+0x4a>
 2ca:	82 e8       	ldi	r24, 0x82	; 130
 2cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 2d0:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2d4:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2d8:	76 95       	lsr	r23
 2da:	67 95       	ror	r22
 2dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <HCSR_1>
 2e0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <HCSR_1+0x1>
 2e4:	0e 94 96 00 	call	0x12c	; 0x12c <HCSR04_RiseEdgeTime>
 2e8:	11 c0       	rjmp	.+34     	; 0x30c <__vector_10+0x6c>
 2ea:	ef e6       	ldi	r30, 0x6F	; 111
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	8f 7d       	andi	r24, 0xDF	; 223
 2f2:	80 83       	st	Z, r24
 2f4:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2f8:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2fc:	76 95       	lsr	r23
 2fe:	67 95       	ror	r22
 300:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <HCSR_1>
 304:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <HCSR_1+0x1>
 308:	0e 94 9f 00 	call	0x13e	; 0x13e <HCSR04_FallEdgeTime>
 30c:	ff 91       	pop	r31
 30e:	ef 91       	pop	r30
 310:	bf 91       	pop	r27
 312:	af 91       	pop	r26
 314:	9f 91       	pop	r25
 316:	8f 91       	pop	r24
 318:	7f 91       	pop	r23
 31a:	6f 91       	pop	r22
 31c:	5f 91       	pop	r21
 31e:	4f 91       	pop	r20
 320:	3f 91       	pop	r19
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_16>:
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	2f 93       	push	r18
 33a:	3f 93       	push	r19
 33c:	4f 93       	push	r20
 33e:	5f 93       	push	r21
 340:	6f 93       	push	r22
 342:	7f 93       	push	r23
 344:	8f 93       	push	r24
 346:	9f 93       	push	r25
 348:	af 93       	push	r26
 34a:	bf 93       	push	r27
 34c:	ef 93       	push	r30
 34e:	ff 93       	push	r31
 350:	0e 94 03 03 	call	0x606	; 0x606 <writeServo>
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <ini_ports>:
 376:	8a e3       	ldi	r24, 0x3A	; 58
 378:	84 b9       	out	0x04, r24	; 4
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	8a b9       	out	0x0a, r24	; 10
 37e:	84 b1       	in	r24, 0x04	; 4
 380:	8e 7f       	andi	r24, 0xFE	; 254
 382:	84 b9       	out	0x04, r24	; 4
 384:	8a b1       	in	r24, 0x0a	; 10
 386:	83 7c       	andi	r24, 0xC3	; 195
 388:	8a b9       	out	0x0a, r24	; 10
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	85 b9       	out	0x05, r24	; 5
 38e:	8c e3       	ldi	r24, 0x3C	; 60
 390:	8b b9       	out	0x0b, r24	; 11
 392:	08 95       	ret

00000394 <ini_timer1>:
 394:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 398:	82 ec       	ldi	r24, 0xC2	; 194
 39a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 39e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 3a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 3ac:	8f e1       	ldi	r24, 0x1F	; 31
 3ae:	9e e4       	ldi	r25, 0x4E	; 78
 3b0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3b8:	86 b3       	in	r24, 0x16	; 22
 3ba:	86 bb       	out	0x16, r24	; 22
 3bc:	08 95       	ret

000003be <ini_timer0>:
 3be:	14 bc       	out	0x24, r1	; 36
 3c0:	16 bc       	out	0x26, r1	; 38
 3c2:	87 e0       	ldi	r24, 0x07	; 7
 3c4:	85 bb       	out	0x15, r24	; 21
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	85 bd       	out	0x25, r24	; 37
 3d0:	08 95       	ret

000003d2 <IR_Init>:
 3d2:	fc 01       	movw	r30, r24
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	80 83       	st	Z, r24
 3d8:	82 83       	std	Z+2, r24	; 0x02
 3da:	11 82       	std	Z+1, r1	; 0x01
 3dc:	08 95       	ret

000003de <IR_Update>:
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	89 f0       	breq	.+34     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <IR_Update+0x14>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	b1 f0       	breq	.+44     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	09 f1       	breq	.+66     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 3f0:	27 c0       	rjmp	.+78     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3f2:	61 30       	cpi	r22, 0x01	; 1
 3f4:	31 f4       	brne	.+12     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f6:	82 81       	ldd	r24, Z+2	; 0x02
 3f8:	81 30       	cpi	r24, 0x01	; 1
 3fa:	19 f4       	brne	.+6      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3fc:	80 83       	st	Z, r24
 3fe:	81 83       	std	Z+1, r24	; 0x01
 400:	21 c0       	rjmp	.+66     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 402:	83 e0       	ldi	r24, 0x03	; 3
 404:	80 83       	st	Z, r24
 406:	1e c0       	rjmp	.+60     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 408:	61 11       	cpse	r22, r1
 40a:	03 c0       	rjmp	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	80 83       	st	Z, r24
 410:	19 c0       	rjmp	.+50     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 83       	st	Z, r24
 416:	16 c0       	rjmp	.+44     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 418:	61 11       	cpse	r22, r1
 41a:	08 c0       	rjmp	.+16     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 41c:	82 81       	ldd	r24, Z+2	; 0x02
 41e:	81 11       	cpse	r24, r1
 420:	05 c0       	rjmp	.+10     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 422:	83 e0       	ldi	r24, 0x03	; 3
 424:	80 83       	st	Z, r24
 426:	80 e1       	ldi	r24, 0x10	; 16
 428:	81 83       	std	Z+1, r24	; 0x01
 42a:	0c c0       	rjmp	.+24     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	80 83       	st	Z, r24
 430:	09 c0       	rjmp	.+18     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 432:	61 30       	cpi	r22, 0x01	; 1
 434:	11 f4       	brne	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	10 82       	st	Z, r1
 438:	05 c0       	rjmp	.+10     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 43a:	83 e0       	ldi	r24, 0x03	; 3
 43c:	80 83       	st	Z, r24
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	80 83       	st	Z, r24
 444:	62 83       	std	Z+2, r22	; 0x02
 446:	08 95       	ret

00000448 <every10ms>:

void every10ms(){
	
	if (!count100ms){		//Si pasaron 100ms
 448:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count100ms>
 44c:	81 11       	cpse	r24, r1
 44e:	1b c0       	rjmp	.+54     	; 0x486 <every10ms+0x3e>

uint32_t	HCSR_1;
uint16_t	aux16 = 0;

static inline void on_reset_hcsr(){
	aux16 = TCNT1;								// Loads actual time in TCNT1 into aux16
 450:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 454:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	aux16 += 20;								// 20*500ns = 10us (tiempo del trigger), Adds 10 (us) to the previously saved time at TCNT1
 458:	44 96       	adiw	r24, 0x14	; 20
 45a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <aux16+0x1>
 45e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <aux16>
	OCR1B = aux16;								// Then loads the value into OCR1B, generating an Output Compare Interrupt
 462:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 466:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TIFR1 = (1<<OCF1B) | (1<<OCF1A);			// Flag set after the counter value in TCNT1 equals OCR1A and OCR1B
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = (1<<OCIE1B);			// Habilita interrupciones B 
 46e:	84 e0       	ldi	r24, 0x04	; 4
 470:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	HCSR04_Start(HCSR_1);						// Trigger en HIGH
 474:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <HCSR_1>
 478:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <HCSR_1+0x1>
 47c:	0e 94 82 00 	call	0x104	; 0x104 <HCSR04_Start>
		on_reset_hcsr();
		count100ms = 10;
 480:	8a e0       	ldi	r24, 0x0A	; 10
 482:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count100ms>
	}
	
	if (!count40ms){
 486:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count40ms>
 48a:	81 11       	cpse	r24, r1
 48c:	06 c0       	rjmp	.+12     	; 0x49a <every10ms+0x52>
		IR_Update(&ir_sensor, raw_input);
 48e:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <raw_input>
 492:	86 e2       	ldi	r24, 0x26	; 38
 494:	91 e0       	ldi	r25, 0x01	; 1
 496:	0e 94 ef 01 	call	0x3de	; 0x3de <IR_Update>
	}
	
	IS10MS = FALSE;
 49a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <flag0>
 49e:	8e 7f       	andi	r24, 0xFE	; 254
 4a0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <flag0>
	count100ms--;
 4a4:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count100ms>
 4a8:	81 50       	subi	r24, 0x01	; 1
 4aa:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count100ms>
	count40ms--;
 4ae:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count40ms>
 4b2:	81 50       	subi	r24, 0x01	; 1
 4b4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count40ms>
 4b8:	08 95       	ret

000004ba <addBox>:
}

void addBox(uint16_t distance){
	
	//dar margen por ej a la caja de 6cm , decir que es veradero cuando sean enrtre 5 y 8cm
	if (distance>Cm6 && distance<Cm8){ //caja mas chica
 4ba:	9c 01       	movw	r18, r24
 4bc:	2d 55       	subi	r18, 0x5D	; 93
 4be:	31 40       	sbci	r19, 0x01	; 1
 4c0:	23 37       	cpi	r18, 0x73	; 115
 4c2:	31 05       	cpc	r19, r1
 4c4:	50 f4       	brcc	.+20     	; 0x4da <addBox+0x20>
		Cajita[Numbox].boxState=isOn;
 4c6:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <Numbox>
 4ca:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <Numbox+0x1>
 4ce:	ee 0f       	add	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	e7 5d       	subi	r30, 0xD7	; 215
 4d4:	fe 4f       	sbci	r31, 0xFE	; 254
 4d6:	11 82       	std	Z+1, r1	; 0x01
		Cajita[Numbox].boxSize=SmallBox;
 4d8:	10 82       	st	Z, r1
	}
	
	if (distance>Cm8 && distance<Cm10){ //caja mediana
 4da:	9c 01       	movw	r18, r24
 4dc:	21 5d       	subi	r18, 0xD1	; 209
 4de:	31 40       	sbci	r19, 0x01	; 1
 4e0:	23 37       	cpi	r18, 0x73	; 115
 4e2:	31 05       	cpc	r19, r1
 4e4:	58 f4       	brcc	.+22     	; 0x4fc <addBox+0x42>
		Cajita[Numbox].boxState=isOn;
 4e6:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <Numbox>
 4ea:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <Numbox+0x1>
 4ee:	ee 0f       	add	r30, r30
 4f0:	ff 1f       	adc	r31, r31
 4f2:	e7 5d       	subi	r30, 0xD7	; 215
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	11 82       	std	Z+1, r1	; 0x01
		Cajita[Numbox].boxSize=MediumBox;
 4f8:	21 e0       	ldi	r18, 0x01	; 1
 4fa:	20 83       	st	Z, r18
	}
	
	if (distance>Cm10 && distance<Cm18){ //caja grande
 4fc:	85 54       	subi	r24, 0x45	; 69
 4fe:	92 40       	sbci	r25, 0x02	; 2
 500:	87 30       	cpi	r24, 0x07	; 7
 502:	92 40       	sbci	r25, 0x02	; 2
 504:	58 f4       	brcc	.+22     	; 0x51c <addBox+0x62>
		Cajita[Numbox].boxState=isOn;
 506:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <Numbox>
 50a:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <Numbox+0x1>
 50e:	ee 0f       	add	r30, r30
 510:	ff 1f       	adc	r31, r31
 512:	e7 5d       	subi	r30, 0xD7	; 215
 514:	fe 4f       	sbci	r31, 0xFE	; 254
 516:	11 82       	std	Z+1, r1	; 0x01
		Cajita[Numbox].boxSize=LargeBox;
 518:	82 e0       	ldi	r24, 0x02	; 2
 51a:	80 83       	st	Z, r24
	}
	
	Numbox++;
 51c:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Numbox>
 520:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <Numbox+0x1>
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <Numbox+0x1>
 52a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <Numbox>
	
	if(Numbox==16){ //reinicio el buffer
 52e:	40 97       	sbiw	r24, 0x10	; 16
 530:	21 f4       	brne	.+8      	; 0x53a <addBox+0x80>
		Numbox=0;
 532:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <Numbox+0x1>
 536:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <Numbox>
	}
	MEASURINGBOX=FALSE;
 53a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <flag0>
 53e:	8d 7f       	andi	r24, 0xFD	; 253
 540:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <flag0>
 544:	08 95       	ret

00000546 <sensorMeasure>:
	count40ms--;
}

void sensorMeasure(uint16_t distance){
	
	if(distance < 1100){
 546:	8c 34       	cpi	r24, 0x4C	; 76
 548:	24 e0       	ldi	r18, 0x04	; 4
 54a:	92 07       	cpc	r25, r18
 54c:	28 f4       	brcc	.+10     	; 0x558 <sensorMeasure+0x12>
		MEASURINGBOX=TRUE;	
 54e:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <flag0>
 552:	22 60       	ori	r18, 0x02	; 2
 554:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <flag0>
	}			//20cm
	
	if(MEASURINGBOX){
 558:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <flag0>
 55c:	21 fd       	sbrc	r18, 1
		addBox(distance);
 55e:	0e 94 5d 02 	call	0x4ba	; 0x4ba <addBox>
 562:	08 95       	ret

00000564 <main>:
}
/* END Function prototypes user code ------------------------------------------*/

int main(){
	
	cli();
 564:	f8 94       	cli




	/* User code Init ------------------------------------------------------------*/
	flag0.byte = 0;
 566:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <flag0>
	
	ini_ports();
 56a:	0e 94 bb 01 	call	0x376	; 0x376 <ini_ports>
	ini_timer1();
 56e:	0e 94 ca 01 	call	0x394	; 0x394 <ini_timer1>
	ini_timer0();
 572:	0e 94 df 01 	call	0x3be	; 0x3be <ini_timer0>
	
	IR_Init(&ir_sensor);
 576:	86 e2       	ldi	r24, 0x26	; 38
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <IR_Init>
	
	addServo(&PORTD,SV0);
 57e:	67 e0       	ldi	r22, 0x07	; 7
 580:	8b e2       	ldi	r24, 0x2B	; 43
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	0e 94 ef 02 	call	0x5de	; 0x5de <addServo>
	addServo(&PORTD,SV1);
 588:	64 e0       	ldi	r22, 0x04	; 4
 58a:	8b e2       	ldi	r24, 0x2B	; 43
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 ef 02 	call	0x5de	; 0x5de <addServo>
	addServo(&PORTD,SV2);
 592:	63 e0       	ldi	r22, 0x03	; 3
 594:	8b e2       	ldi	r24, 0x2B	; 43
 596:	90 e0       	ldi	r25, 0x00	; 0
 598:	0e 94 ef 02 	call	0x5de	; 0x5de <addServo>
	HCSR_1 = HCSR04_AddNew(&WritePin_HCSR, 16);
 59c:	40 e1       	ldi	r20, 0x10	; 16
 59e:	50 e0       	ldi	r21, 0x00	; 0
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	70 e0       	ldi	r23, 0x00	; 0
 5a4:	82 ef       	ldi	r24, 0xF2	; 242
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	0e 94 53 00 	call	0xa6	; 0xa6 <HCSR04_AddNew>
 5ac:	ac 01       	movw	r20, r24
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	70 e0       	ldi	r23, 0x00	; 0
 5b2:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <HCSR_1>
 5b6:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <HCSR_1+0x1>
 5ba:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <HCSR_1+0x2>
 5be:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <HCSR_1+0x3>
	HCSR04_AttachOnReadyMeasure(HCSR_1, &sensorMeasure);	
 5c2:	63 ea       	ldi	r22, 0xA3	; 163
 5c4:	72 e0       	ldi	r23, 0x02	; 2
 5c6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <HCSR04_AttachOnReadyMeasure>
	
	/* END User code Init --------------------------------------------------------*/
	sei();
 5ca:	78 94       	sei

	while (1){
		/* User Code loop ------------------------------------------------------------*/
		task_HCSR();
 5cc:	0e 94 aa 00 	call	0x154	; 0x154 <task_HCSR>
		if (IS10MS)
 5d0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <flag0>
 5d4:	80 ff       	sbrs	r24, 0
 5d6:	fa cf       	rjmp	.-12     	; 0x5cc <main+0x68>
			every10ms();
 5d8:	0e 94 24 02 	call	0x448	; 0x448 <every10ms>
 5dc:	f7 cf       	rjmp	.-18     	; 0x5cc <main+0x68>

000005de <addServo>:
	riseValue += ANGLE_TO_PWM_OFFSET;
	riseValue /= 180;
	riseValue += ROUNDING_CORRECTION;
	riseValue /= 10;
		
	servoHandle[servo].dutyCycle = (uint8_t)riseValue;
 5de:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <ServN>
 5e2:	e2 2f       	mov	r30, r18
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	af 01       	movw	r20, r30
 5e8:	44 0f       	add	r20, r20
 5ea:	55 1f       	adc	r21, r21
 5ec:	44 0f       	add	r20, r20
 5ee:	55 1f       	adc	r21, r21
 5f0:	e4 0f       	add	r30, r20
 5f2:	f5 1f       	adc	r31, r21
 5f4:	e1 5f       	subi	r30, 0xF1	; 241
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	62 83       	std	Z+2, r22	; 0x02
 5fa:	91 83       	std	Z+1, r25	; 0x01
 5fc:	80 83       	st	Z, r24
 5fe:	2f 5f       	subi	r18, 0xFF	; 255
 600:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <ServN>
 604:	08 95       	ret

00000606 <writeServo>:
}

void writeServo(){
	is20ms--;
 606:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <is20ms>
 60a:	81 50       	subi	r24, 0x01	; 1
 60c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <is20ms>
	
	uint8_t counter=0;
	
	for(counter = 0; counter < ServN; counter++){
 610:	20 e0       	ldi	r18, 0x00	; 0
 612:	2a c0       	rjmp	.+84     	; 0x668 <writeServo+0x62>
		servoHandle[counter].cycle--;
 614:	82 2f       	mov	r24, r18
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	fc 01       	movw	r30, r24
 61a:	ee 0f       	add	r30, r30
 61c:	ff 1f       	adc	r31, r31
 61e:	ee 0f       	add	r30, r30
 620:	ff 1f       	adc	r31, r31
 622:	e8 0f       	add	r30, r24
 624:	f9 1f       	adc	r31, r25
 626:	e1 5f       	subi	r30, 0xF1	; 241
 628:	fe 4f       	sbci	r31, 0xFE	; 254
 62a:	33 81       	ldd	r19, Z+3	; 0x03
 62c:	31 50       	subi	r19, 0x01	; 1
 62e:	33 83       	std	Z+3, r19	; 0x03
		if(!servoHandle[counter].cycle)
 630:	33 81       	ldd	r19, Z+3	; 0x03
 632:	31 11       	cpse	r19, r1
 634:	18 c0       	rjmp	.+48     	; 0x666 <writeServo+0x60>
		*servoHandle[counter].port &= ~(1 << servoHandle[counter].pin);
 636:	fc 01       	movw	r30, r24
 638:	ee 0f       	add	r30, r30
 63a:	ff 1f       	adc	r31, r31
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	8e 0f       	add	r24, r30
 642:	9f 1f       	adc	r25, r31
 644:	fc 01       	movw	r30, r24
 646:	e1 5f       	subi	r30, 0xF1	; 241
 648:	fe 4f       	sbci	r31, 0xFE	; 254
 64a:	a0 81       	ld	r26, Z
 64c:	b1 81       	ldd	r27, Z+1	; 0x01
 64e:	3c 91       	ld	r19, X
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	02 80       	ldd	r0, Z+2	; 0x02
 656:	02 c0       	rjmp	.+4      	; 0x65c <writeServo+0x56>
 658:	88 0f       	add	r24, r24
 65a:	99 1f       	adc	r25, r25
 65c:	0a 94       	dec	r0
 65e:	e2 f7       	brpl	.-8      	; 0x658 <writeServo+0x52>
 660:	80 95       	com	r24
 662:	83 23       	and	r24, r19
 664:	8c 93       	st	X, r24
void writeServo(){
	is20ms--;
	
	uint8_t counter=0;
	
	for(counter = 0; counter < ServN; counter++){
 666:	2f 5f       	subi	r18, 0xFF	; 255
 668:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <ServN>
 66c:	28 17       	cp	r18, r24
 66e:	90 f2       	brcs	.-92     	; 0x614 <writeServo+0xe>
		servoHandle[counter].cycle--;
		if(!servoHandle[counter].cycle)
		*servoHandle[counter].port &= ~(1 << servoHandle[counter].pin);
	}
	if(!is20ms){
 670:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <is20ms>
 674:	99 23       	and	r25, r25
 676:	e9 f0       	breq	.+58     	; 0x6b2 <writeServo+0xac>
 678:	08 95       	ret
		for(counter = 0; counter < ServN; counter++){
			servoHandle[counter].cycle = servoHandle[counter].dutyCycle;
 67a:	e9 2f       	mov	r30, r25
 67c:	f0 e0       	ldi	r31, 0x00	; 0
 67e:	9f 01       	movw	r18, r30
 680:	22 0f       	add	r18, r18
 682:	33 1f       	adc	r19, r19
 684:	22 0f       	add	r18, r18
 686:	33 1f       	adc	r19, r19
 688:	e2 0f       	add	r30, r18
 68a:	f3 1f       	adc	r31, r19
 68c:	e1 5f       	subi	r30, 0xF1	; 241
 68e:	fe 4f       	sbci	r31, 0xFE	; 254
 690:	24 81       	ldd	r18, Z+4	; 0x04
 692:	23 83       	std	Z+3, r18	; 0x03
			*servoHandle[counter].port |= (1 << servoHandle[counter].pin);
 694:	a0 81       	ld	r26, Z
 696:	b1 81       	ldd	r27, Z+1	; 0x01
 698:	4c 91       	ld	r20, X
 69a:	21 e0       	ldi	r18, 0x01	; 1
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	02 80       	ldd	r0, Z+2	; 0x02
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <writeServo+0xa0>
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	0a 94       	dec	r0
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <writeServo+0x9c>
 6aa:	24 2b       	or	r18, r20
 6ac:	2c 93       	st	X, r18
		servoHandle[counter].cycle--;
		if(!servoHandle[counter].cycle)
		*servoHandle[counter].port &= ~(1 << servoHandle[counter].pin);
	}
	if(!is20ms){
		for(counter = 0; counter < ServN; counter++){
 6ae:	9f 5f       	subi	r25, 0xFF	; 255
 6b0:	01 c0       	rjmp	.+2      	; 0x6b4 <writeServo+0xae>
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	98 17       	cp	r25, r24
 6b6:	08 f3       	brcs	.-62     	; 0x67a <writeServo+0x74>
			servoHandle[counter].cycle = servoHandle[counter].dutyCycle;
			*servoHandle[counter].port |= (1 << servoHandle[counter].pin);
		}
		is20ms = 156;
 6b8:	8c e9       	ldi	r24, 0x9C	; 156
 6ba:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <is20ms>
 6be:	08 95       	ret

000006c0 <malloc>:
 6c0:	0f 93       	push	r16
 6c2:	1f 93       	push	r17
 6c4:	cf 93       	push	r28
 6c6:	df 93       	push	r29
 6c8:	82 30       	cpi	r24, 0x02	; 2
 6ca:	91 05       	cpc	r25, r1
 6cc:	10 f4       	brcc	.+4      	; 0x6d2 <malloc+0x12>
 6ce:	82 e0       	ldi	r24, 0x02	; 2
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <__flp>
 6d6:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <__flp+0x1>
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	30 e0       	ldi	r19, 0x00	; 0
 6de:	a0 e0       	ldi	r26, 0x00	; 0
 6e0:	b0 e0       	ldi	r27, 0x00	; 0
 6e2:	30 97       	sbiw	r30, 0x00	; 0
 6e4:	19 f1       	breq	.+70     	; 0x72c <malloc+0x6c>
 6e6:	40 81       	ld	r20, Z
 6e8:	51 81       	ldd	r21, Z+1	; 0x01
 6ea:	02 81       	ldd	r16, Z+2	; 0x02
 6ec:	13 81       	ldd	r17, Z+3	; 0x03
 6ee:	48 17       	cp	r20, r24
 6f0:	59 07       	cpc	r21, r25
 6f2:	c8 f0       	brcs	.+50     	; 0x726 <malloc+0x66>
 6f4:	84 17       	cp	r24, r20
 6f6:	95 07       	cpc	r25, r21
 6f8:	69 f4       	brne	.+26     	; 0x714 <malloc+0x54>
 6fa:	10 97       	sbiw	r26, 0x00	; 0
 6fc:	31 f0       	breq	.+12     	; 0x70a <malloc+0x4a>
 6fe:	12 96       	adiw	r26, 0x02	; 2
 700:	0c 93       	st	X, r16
 702:	12 97       	sbiw	r26, 0x02	; 2
 704:	13 96       	adiw	r26, 0x03	; 3
 706:	1c 93       	st	X, r17
 708:	27 c0       	rjmp	.+78     	; 0x758 <malloc+0x98>
 70a:	00 93 49 01 	sts	0x0149, r16	; 0x800149 <__flp>
 70e:	10 93 4a 01 	sts	0x014A, r17	; 0x80014a <__flp+0x1>
 712:	22 c0       	rjmp	.+68     	; 0x758 <malloc+0x98>
 714:	21 15       	cp	r18, r1
 716:	31 05       	cpc	r19, r1
 718:	19 f0       	breq	.+6      	; 0x720 <malloc+0x60>
 71a:	42 17       	cp	r20, r18
 71c:	53 07       	cpc	r21, r19
 71e:	18 f4       	brcc	.+6      	; 0x726 <malloc+0x66>
 720:	9a 01       	movw	r18, r20
 722:	bd 01       	movw	r22, r26
 724:	ef 01       	movw	r28, r30
 726:	df 01       	movw	r26, r30
 728:	f8 01       	movw	r30, r16
 72a:	db cf       	rjmp	.-74     	; 0x6e2 <malloc+0x22>
 72c:	21 15       	cp	r18, r1
 72e:	31 05       	cpc	r19, r1
 730:	f9 f0       	breq	.+62     	; 0x770 <malloc+0xb0>
 732:	28 1b       	sub	r18, r24
 734:	39 0b       	sbc	r19, r25
 736:	24 30       	cpi	r18, 0x04	; 4
 738:	31 05       	cpc	r19, r1
 73a:	80 f4       	brcc	.+32     	; 0x75c <malloc+0x9c>
 73c:	8a 81       	ldd	r24, Y+2	; 0x02
 73e:	9b 81       	ldd	r25, Y+3	; 0x03
 740:	61 15       	cp	r22, r1
 742:	71 05       	cpc	r23, r1
 744:	21 f0       	breq	.+8      	; 0x74e <malloc+0x8e>
 746:	fb 01       	movw	r30, r22
 748:	93 83       	std	Z+3, r25	; 0x03
 74a:	82 83       	std	Z+2, r24	; 0x02
 74c:	04 c0       	rjmp	.+8      	; 0x756 <malloc+0x96>
 74e:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <__flp+0x1>
 752:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__flp>
 756:	fe 01       	movw	r30, r28
 758:	32 96       	adiw	r30, 0x02	; 2
 75a:	44 c0       	rjmp	.+136    	; 0x7e4 <malloc+0x124>
 75c:	fe 01       	movw	r30, r28
 75e:	e2 0f       	add	r30, r18
 760:	f3 1f       	adc	r31, r19
 762:	81 93       	st	Z+, r24
 764:	91 93       	st	Z+, r25
 766:	22 50       	subi	r18, 0x02	; 2
 768:	31 09       	sbc	r19, r1
 76a:	39 83       	std	Y+1, r19	; 0x01
 76c:	28 83       	st	Y, r18
 76e:	3a c0       	rjmp	.+116    	; 0x7e4 <malloc+0x124>
 770:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <__brkval>
 774:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <__brkval+0x1>
 778:	23 2b       	or	r18, r19
 77a:	41 f4       	brne	.+16     	; 0x78c <malloc+0xcc>
 77c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 780:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 784:	30 93 48 01 	sts	0x0148, r19	; 0x800148 <__brkval+0x1>
 788:	20 93 47 01 	sts	0x0147, r18	; 0x800147 <__brkval>
 78c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 790:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 794:	21 15       	cp	r18, r1
 796:	31 05       	cpc	r19, r1
 798:	41 f4       	brne	.+16     	; 0x7aa <malloc+0xea>
 79a:	2d b7       	in	r18, 0x3d	; 61
 79c:	3e b7       	in	r19, 0x3e	; 62
 79e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 7a2:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 7a6:	24 1b       	sub	r18, r20
 7a8:	35 0b       	sbc	r19, r21
 7aa:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <__brkval>
 7ae:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <__brkval+0x1>
 7b2:	e2 17       	cp	r30, r18
 7b4:	f3 07       	cpc	r31, r19
 7b6:	a0 f4       	brcc	.+40     	; 0x7e0 <malloc+0x120>
 7b8:	2e 1b       	sub	r18, r30
 7ba:	3f 0b       	sbc	r19, r31
 7bc:	28 17       	cp	r18, r24
 7be:	39 07       	cpc	r19, r25
 7c0:	78 f0       	brcs	.+30     	; 0x7e0 <malloc+0x120>
 7c2:	ac 01       	movw	r20, r24
 7c4:	4e 5f       	subi	r20, 0xFE	; 254
 7c6:	5f 4f       	sbci	r21, 0xFF	; 255
 7c8:	24 17       	cp	r18, r20
 7ca:	35 07       	cpc	r19, r21
 7cc:	48 f0       	brcs	.+18     	; 0x7e0 <malloc+0x120>
 7ce:	4e 0f       	add	r20, r30
 7d0:	5f 1f       	adc	r21, r31
 7d2:	50 93 48 01 	sts	0x0148, r21	; 0x800148 <__brkval+0x1>
 7d6:	40 93 47 01 	sts	0x0147, r20	; 0x800147 <__brkval>
 7da:	81 93       	st	Z+, r24
 7dc:	91 93       	st	Z+, r25
 7de:	02 c0       	rjmp	.+4      	; 0x7e4 <malloc+0x124>
 7e0:	e0 e0       	ldi	r30, 0x00	; 0
 7e2:	f0 e0       	ldi	r31, 0x00	; 0
 7e4:	cf 01       	movw	r24, r30
 7e6:	df 91       	pop	r29
 7e8:	cf 91       	pop	r28
 7ea:	1f 91       	pop	r17
 7ec:	0f 91       	pop	r16
 7ee:	08 95       	ret

000007f0 <free>:
 7f0:	cf 93       	push	r28
 7f2:	df 93       	push	r29
 7f4:	00 97       	sbiw	r24, 0x00	; 0
 7f6:	09 f4       	brne	.+2      	; 0x7fa <free+0xa>
 7f8:	81 c0       	rjmp	.+258    	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 7fa:	fc 01       	movw	r30, r24
 7fc:	32 97       	sbiw	r30, 0x02	; 2
 7fe:	13 82       	std	Z+3, r1	; 0x03
 800:	12 82       	std	Z+2, r1	; 0x02
 802:	a0 91 49 01 	lds	r26, 0x0149	; 0x800149 <__flp>
 806:	b0 91 4a 01 	lds	r27, 0x014A	; 0x80014a <__flp+0x1>
 80a:	10 97       	sbiw	r26, 0x00	; 0
 80c:	81 f4       	brne	.+32     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 80e:	20 81       	ld	r18, Z
 810:	31 81       	ldd	r19, Z+1	; 0x01
 812:	82 0f       	add	r24, r18
 814:	93 1f       	adc	r25, r19
 816:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <__brkval>
 81a:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <__brkval+0x1>
 81e:	28 17       	cp	r18, r24
 820:	39 07       	cpc	r19, r25
 822:	51 f5       	brne	.+84     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 824:	f0 93 48 01 	sts	0x0148, r31	; 0x800148 <__brkval+0x1>
 828:	e0 93 47 01 	sts	0x0147, r30	; 0x800147 <__brkval>
 82c:	67 c0       	rjmp	.+206    	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 82e:	ed 01       	movw	r28, r26
 830:	20 e0       	ldi	r18, 0x00	; 0
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	ce 17       	cp	r28, r30
 836:	df 07       	cpc	r29, r31
 838:	40 f4       	brcc	.+16     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83a:	4a 81       	ldd	r20, Y+2	; 0x02
 83c:	5b 81       	ldd	r21, Y+3	; 0x03
 83e:	9e 01       	movw	r18, r28
 840:	41 15       	cp	r20, r1
 842:	51 05       	cpc	r21, r1
 844:	f1 f0       	breq	.+60     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 846:	ea 01       	movw	r28, r20
 848:	f5 cf       	rjmp	.-22     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 84a:	d3 83       	std	Z+3, r29	; 0x03
 84c:	c2 83       	std	Z+2, r28	; 0x02
 84e:	40 81       	ld	r20, Z
 850:	51 81       	ldd	r21, Z+1	; 0x01
 852:	84 0f       	add	r24, r20
 854:	95 1f       	adc	r25, r21
 856:	c8 17       	cp	r28, r24
 858:	d9 07       	cpc	r29, r25
 85a:	59 f4       	brne	.+22     	; 0x872 <__DATA_REGION_LENGTH__+0x72>
 85c:	88 81       	ld	r24, Y
 85e:	99 81       	ldd	r25, Y+1	; 0x01
 860:	84 0f       	add	r24, r20
 862:	95 1f       	adc	r25, r21
 864:	02 96       	adiw	r24, 0x02	; 2
 866:	91 83       	std	Z+1, r25	; 0x01
 868:	80 83       	st	Z, r24
 86a:	8a 81       	ldd	r24, Y+2	; 0x02
 86c:	9b 81       	ldd	r25, Y+3	; 0x03
 86e:	93 83       	std	Z+3, r25	; 0x03
 870:	82 83       	std	Z+2, r24	; 0x02
 872:	21 15       	cp	r18, r1
 874:	31 05       	cpc	r19, r1
 876:	29 f4       	brne	.+10     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 878:	f0 93 4a 01 	sts	0x014A, r31	; 0x80014a <__flp+0x1>
 87c:	e0 93 49 01 	sts	0x0149, r30	; 0x800149 <__flp>
 880:	3d c0       	rjmp	.+122    	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 882:	e9 01       	movw	r28, r18
 884:	fb 83       	std	Y+3, r31	; 0x03
 886:	ea 83       	std	Y+2, r30	; 0x02
 888:	49 91       	ld	r20, Y+
 88a:	59 91       	ld	r21, Y+
 88c:	c4 0f       	add	r28, r20
 88e:	d5 1f       	adc	r29, r21
 890:	ec 17       	cp	r30, r28
 892:	fd 07       	cpc	r31, r29
 894:	61 f4       	brne	.+24     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 896:	80 81       	ld	r24, Z
 898:	91 81       	ldd	r25, Z+1	; 0x01
 89a:	84 0f       	add	r24, r20
 89c:	95 1f       	adc	r25, r21
 89e:	02 96       	adiw	r24, 0x02	; 2
 8a0:	e9 01       	movw	r28, r18
 8a2:	99 83       	std	Y+1, r25	; 0x01
 8a4:	88 83       	st	Y, r24
 8a6:	82 81       	ldd	r24, Z+2	; 0x02
 8a8:	93 81       	ldd	r25, Z+3	; 0x03
 8aa:	9b 83       	std	Y+3, r25	; 0x03
 8ac:	8a 83       	std	Y+2, r24	; 0x02
 8ae:	e0 e0       	ldi	r30, 0x00	; 0
 8b0:	f0 e0       	ldi	r31, 0x00	; 0
 8b2:	12 96       	adiw	r26, 0x02	; 2
 8b4:	8d 91       	ld	r24, X+
 8b6:	9c 91       	ld	r25, X
 8b8:	13 97       	sbiw	r26, 0x03	; 3
 8ba:	00 97       	sbiw	r24, 0x00	; 0
 8bc:	19 f0       	breq	.+6      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8be:	fd 01       	movw	r30, r26
 8c0:	dc 01       	movw	r26, r24
 8c2:	f7 cf       	rjmp	.-18     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 8c4:	8d 91       	ld	r24, X+
 8c6:	9c 91       	ld	r25, X
 8c8:	11 97       	sbiw	r26, 0x01	; 1
 8ca:	9d 01       	movw	r18, r26
 8cc:	2e 5f       	subi	r18, 0xFE	; 254
 8ce:	3f 4f       	sbci	r19, 0xFF	; 255
 8d0:	82 0f       	add	r24, r18
 8d2:	93 1f       	adc	r25, r19
 8d4:	20 91 47 01 	lds	r18, 0x0147	; 0x800147 <__brkval>
 8d8:	30 91 48 01 	lds	r19, 0x0148	; 0x800148 <__brkval+0x1>
 8dc:	28 17       	cp	r18, r24
 8de:	39 07       	cpc	r19, r25
 8e0:	69 f4       	brne	.+26     	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8e2:	30 97       	sbiw	r30, 0x00	; 0
 8e4:	29 f4       	brne	.+10     	; 0x8f0 <__DATA_REGION_LENGTH__+0xf0>
 8e6:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <__flp+0x1>
 8ea:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__flp>
 8ee:	02 c0       	rjmp	.+4      	; 0x8f4 <__DATA_REGION_LENGTH__+0xf4>
 8f0:	13 82       	std	Z+3, r1	; 0x03
 8f2:	12 82       	std	Z+2, r1	; 0x02
 8f4:	b0 93 48 01 	sts	0x0148, r27	; 0x800148 <__brkval+0x1>
 8f8:	a0 93 47 01 	sts	0x0147, r26	; 0x800147 <__brkval>
 8fc:	df 91       	pop	r29
 8fe:	cf 91       	pop	r28
 900:	08 95       	ret

00000902 <_exit>:
 902:	f8 94       	cli

00000904 <__stop_program>:
 904:	ff cf       	rjmp	.-2      	; 0x904 <__stop_program>
