
Cinta_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000ddc  00000e70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ddc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000271  0080010a  0080010a  00000e7a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000eac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019f6  00000000  00000000  00001034  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5b  00000000  00000000  00002a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c68  00000000  00000000  00003585  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  000041f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009d4  00000000  00000000  000045ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a13  00000000  00000000  00004f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00005993  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_10>
  2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_11>
  30:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_12>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_16>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 a1 01 	jmp	0x342	; 0x342 <__vector_18>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  58:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  5c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  60:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  68:	75 03       	mulsu	r23, r21
  6a:	83 03       	fmuls	r16, r19
  6c:	9b 03       	fmulsu	r17, r19
  6e:	b0 03       	fmuls	r19, r16
  70:	c5 03       	fmuls	r20, r21
  72:	d3 03       	fmuls	r21, r19
  74:	f8 03       	fmulsu	r23, r16

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	11 e0       	ldi	r17, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	ec ed       	ldi	r30, 0xDC	; 220
  8a:	fd e0       	ldi	r31, 0x0D	; 13
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	aa 30       	cpi	r26, 0x0A	; 10
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	23 e0       	ldi	r18, 0x03	; 3
  9a:	aa e0       	ldi	r26, 0x0A	; 10
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	ab 37       	cpi	r26, 0x7B	; 123
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <main>
  ac:	0c 94 ec 06 	jmp	0xdd8	; 0xdd8 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <HCSR04_AddNew>:
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	ec 01       	movw	r28, r24
  c2:	6a 01       	movw	r12, r20
  c4:	7b 01       	movw	r14, r22
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 cb 05 	call	0xb96	; 0xb96 <malloc>
  ce:	fc 01       	movw	r30, r24
  d0:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
  d4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
  d8:	d1 83       	std	Z+1, r29	; 0x01
  da:	c0 83       	st	Z, r28
  dc:	c2 86       	std	Z+10, r12	; 0x0a
  de:	d3 86       	std	Z+11, r13	; 0x0b
  e0:	e4 86       	std	Z+12, r14	; 0x0c
  e2:	f5 86       	std	Z+13, r15	; 0x0d
  e4:	16 86       	std	Z+14, r1	; 0x0e
  e6:	11 86       	std	Z+9, r1	; 0x09
  e8:	10 86       	std	Z+8, r1	; 0x08
  ea:	15 82       	std	Z+5, r1	; 0x05
  ec:	14 82       	std	Z+4, r1	; 0x04
  ee:	17 82       	std	Z+7, r1	; 0x07
  f0:	16 82       	std	Z+6, r1	; 0x06
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	fe 01       	movw	r30, r28
  f6:	09 95       	icall
  f8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
  fc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	ff 90       	pop	r15
 106:	ef 90       	pop	r14
 108:	df 90       	pop	r13
 10a:	cf 90       	pop	r12
 10c:	08 95       	ret

0000010e <HCSR04_Start>:
 10e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 112:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 116:	dc 01       	movw	r26, r24
 118:	ed 91       	ld	r30, X+
 11a:	fc 91       	ld	r31, X
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	09 95       	icall
 120:	08 95       	ret

00000122 <HCSR04_TriggerReady>:
 122:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 126:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 12a:	dc 01       	movw	r26, r24
 12c:	ed 91       	ld	r30, X+
 12e:	fc 91       	ld	r31, X
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	09 95       	icall
 134:	08 95       	ret

00000136 <HCSR04_RiseEdgeTime>:
 136:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 13a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 13e:	fc 01       	movw	r30, r24
 140:	75 83       	std	Z+5, r23	; 0x05
 142:	64 83       	std	Z+4, r22	; 0x04
 144:	16 86       	std	Z+14, r1	; 0x0e
 146:	08 95       	ret

00000148 <HCSR04_FallEdgeTime>:
 148:	fc 01       	movw	r30, r24
 14a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 14e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
 152:	77 83       	std	Z+7, r23	; 0x07
 154:	66 83       	std	Z+6, r22	; 0x06
 156:	86 85       	ldd	r24, Z+14	; 0x0e
 158:	81 60       	ori	r24, 0x01	; 1
 15a:	86 87       	std	Z+14, r24	; 0x0e
 15c:	08 95       	ret

0000015e <task_HCSR>:
 15e:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 162:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 166:	30 97       	sbiw	r30, 0x00	; 0
 168:	11 f1       	breq	.+68     	; 0x1ae <task_HCSR+0x50>
 16a:	86 85       	ldd	r24, Z+14	; 0x0e
 16c:	80 ff       	sbrs	r24, 0
 16e:	1f c0       	rjmp	.+62     	; 0x1ae <task_HCSR+0x50>
 170:	16 86       	std	Z+14, r1	; 0x0e
 172:	24 81       	ldd	r18, Z+4	; 0x04
 174:	35 81       	ldd	r19, Z+5	; 0x05
 176:	86 81       	ldd	r24, Z+6	; 0x06
 178:	97 81       	ldd	r25, Z+7	; 0x07
 17a:	28 17       	cp	r18, r24
 17c:	39 07       	cpc	r19, r25
 17e:	28 f4       	brcc	.+10     	; 0x18a <task_HCSR+0x2c>
 180:	82 1b       	sub	r24, r18
 182:	93 0b       	sbc	r25, r19
 184:	91 87       	std	Z+9, r25	; 0x09
 186:	80 87       	std	Z+8, r24	; 0x08
 188:	05 c0       	rjmp	.+10     	; 0x194 <task_HCSR+0x36>
 18a:	82 1b       	sub	r24, r18
 18c:	93 0b       	sbc	r25, r19
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	91 87       	std	Z+9, r25	; 0x09
 192:	80 87       	std	Z+8, r24	; 0x08
 194:	80 85       	ldd	r24, Z+8	; 0x08
 196:	91 85       	ldd	r25, Z+9	; 0x09
 198:	85 3f       	cpi	r24, 0xF5	; 245
 19a:	9d 42       	sbci	r25, 0x2D	; 45
 19c:	20 f0       	brcs	.+8      	; 0x1a6 <task_HCSR+0x48>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	9f ef       	ldi	r25, 0xFF	; 255
 1a2:	91 87       	std	Z+9, r25	; 0x09
 1a4:	80 87       	std	Z+8, r24	; 0x08
 1a6:	80 85       	ldd	r24, Z+8	; 0x08
 1a8:	91 85       	ldd	r25, Z+9	; 0x09
 1aa:	0e 94 67 04 	call	0x8ce	; 0x8ce <sensorMeasure>
 1ae:	08 95       	ret

000001b0 <WritePin_HCSR>:
	Numbox++;
	
	if(Numbox>=bufferBox) //reinicio el buffer
		Numbox=0;
	
	MEASURINGBOX=FALSE;
 1b0:	88 23       	and	r24, r24
 1b2:	21 f0       	breq	.+8      	; 0x1bc <WritePin_HCSR+0xc>
 1b4:	85 b1       	in	r24, 0x05	; 5
 1b6:	82 60       	ori	r24, 0x02	; 2
 1b8:	85 b9       	out	0x05, r24	; 5
 1ba:	08 95       	ret
 1bc:	85 b1       	in	r24, 0x05	; 5
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	85 b9       	out	0x05, r24	; 5
 1c2:	08 95       	ret

000001c4 <__vector_11>:
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	8f 93       	push	r24
 1d0:	9f 93       	push	r25
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
 1d6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <flag0>
 1da:	81 60       	ori	r24, 0x01	; 1
 1dc:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <flag0>
 1e0:	e8 e8       	ldi	r30, 0x88	; 136
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	91 81       	ldd	r25, Z+1	; 0x01
 1e8:	81 5e       	subi	r24, 0xE1	; 225
 1ea:	91 4b       	sbci	r25, 0xB1	; 177
 1ec:	91 83       	std	Z+1, r25	; 0x01
 1ee:	80 83       	st	Z, r24
 1f0:	ff 91       	pop	r31
 1f2:	ef 91       	pop	r30
 1f4:	9f 91       	pop	r25
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_12>:
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	2f 93       	push	r18
 20e:	3f 93       	push	r19
 210:	4f 93       	push	r20
 212:	5f 93       	push	r21
 214:	6f 93       	push	r22
 216:	7f 93       	push	r23
 218:	8f 93       	push	r24
 21a:	9f 93       	push	r25
 21c:	af 93       	push	r26
 21e:	bf 93       	push	r27
 220:	ef 93       	push	r30
 222:	ff 93       	push	r31
 224:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <HCSR_1>
 228:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <HCSR_1+0x1>
 22c:	0e 94 91 00 	call	0x122	; 0x122 <HCSR04_TriggerReady>
 230:	86 b3       	in	r24, 0x16	; 22
 232:	80 62       	ori	r24, 0x20	; 32
 234:	86 bb       	out	0x16, r24	; 22
 236:	e1 e8       	ldi	r30, 0x81	; 129
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 ec       	ldi	r24, 0xC0	; 192
 23c:	80 83       	st	Z, r24
 23e:	80 81       	ld	r24, Z
 240:	82 60       	ori	r24, 0x02	; 2
 242:	80 83       	st	Z, r24
 244:	82 e2       	ldi	r24, 0x22	; 34
 246:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 24a:	ff 91       	pop	r31
 24c:	ef 91       	pop	r30
 24e:	bf 91       	pop	r27
 250:	af 91       	pop	r26
 252:	9f 91       	pop	r25
 254:	8f 91       	pop	r24
 256:	7f 91       	pop	r23
 258:	6f 91       	pop	r22
 25a:	5f 91       	pop	r21
 25c:	4f 91       	pop	r20
 25e:	3f 91       	pop	r19
 260:	2f 91       	pop	r18
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_10>:
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	2f 93       	push	r18
 278:	3f 93       	push	r19
 27a:	4f 93       	push	r20
 27c:	5f 93       	push	r21
 27e:	6f 93       	push	r22
 280:	7f 93       	push	r23
 282:	8f 93       	push	r24
 284:	9f 93       	push	r25
 286:	af 93       	push	r26
 288:	bf 93       	push	r27
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
 28e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 292:	86 ff       	sbrs	r24, 6
 294:	10 c0       	rjmp	.+32     	; 0x2b6 <__vector_10+0x4a>
 296:	82 e8       	ldi	r24, 0x82	; 130
 298:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 29c:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2a0:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2a4:	76 95       	lsr	r23
 2a6:	67 95       	ror	r22
 2a8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <HCSR_1>
 2ac:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <HCSR_1+0x1>
 2b0:	0e 94 9b 00 	call	0x136	; 0x136 <HCSR04_RiseEdgeTime>
 2b4:	11 c0       	rjmp	.+34     	; 0x2d8 <__vector_10+0x6c>
 2b6:	ef e6       	ldi	r30, 0x6F	; 111
 2b8:	f0 e0       	ldi	r31, 0x00	; 0
 2ba:	80 81       	ld	r24, Z
 2bc:	8f 7d       	andi	r24, 0xDF	; 223
 2be:	80 83       	st	Z, r24
 2c0:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 2c4:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 2c8:	76 95       	lsr	r23
 2ca:	67 95       	ror	r22
 2cc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <HCSR_1>
 2d0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <HCSR_1+0x1>
 2d4:	0e 94 a4 00 	call	0x148	; 0x148 <HCSR04_FallEdgeTime>
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_16>:
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
 31c:	0e 94 68 05 	call	0xad0	; 0xad0 <writeServo>
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	bf 91       	pop	r27
 326:	af 91       	pop	r26
 328:	9f 91       	pop	r25
 32a:	8f 91       	pop	r24
 32c:	7f 91       	pop	r23
 32e:	6f 91       	pop	r22
 330:	5f 91       	pop	r21
 332:	4f 91       	pop	r20
 334:	3f 91       	pop	r19
 336:	2f 91       	pop	r18
 338:	0f 90       	pop	r0
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	0f 90       	pop	r0
 33e:	1f 90       	pop	r1
 340:	18 95       	reti

00000342 <__vector_18>:
 342:	1f 92       	push	r1
 344:	0f 92       	push	r0
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	0f 92       	push	r0
 34a:	11 24       	eor	r1, r1
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
 358:	e2 e3       	ldi	r30, 0x32	; 50
 35a:	f2 e0       	ldi	r31, 0x02	; 2
 35c:	a0 81       	ld	r26, Z
 35e:	b1 81       	ldd	r27, Z+1	; 0x01
 360:	83 81       	ldd	r24, Z+3	; 0x03
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	98 0f       	add	r25, r24
 366:	93 83       	std	Z+3, r25	; 0x03
 368:	a8 0f       	add	r26, r24
 36a:	b1 1d       	adc	r27, r1
 36c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 370:	8c 93       	st	X, r24
 372:	85 81       	ldd	r24, Z+5	; 0x05
 374:	93 81       	ldd	r25, Z+3	; 0x03
 376:	89 23       	and	r24, r25
 378:	83 83       	std	Z+3, r24	; 0x03
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <ini_ports>:
 390:	8a e3       	ldi	r24, 0x3A	; 58
 392:	84 b9       	out	0x04, r24	; 4
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	8a b9       	out	0x0a, r24	; 10
 398:	84 b1       	in	r24, 0x04	; 4
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	84 b9       	out	0x04, r24	; 4
 39e:	8a b1       	in	r24, 0x0a	; 10
 3a0:	83 7c       	andi	r24, 0xC3	; 195
 3a2:	8a b9       	out	0x0a, r24	; 10
 3a4:	81 e0       	ldi	r24, 0x01	; 1
 3a6:	85 b9       	out	0x05, r24	; 5
 3a8:	8c e3       	ldi	r24, 0x3C	; 60
 3aa:	8b b9       	out	0x0b, r24	; 11
 3ac:	08 95       	ret

000003ae <ini_timer1>:
 3ae:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 3b2:	82 ec       	ldi	r24, 0xC2	; 194
 3b4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 3b8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 3bc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 3c0:	82 e0       	ldi	r24, 0x02	; 2
 3c2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 3c6:	8f e1       	ldi	r24, 0x1F	; 31
 3c8:	9e e4       	ldi	r25, 0x4E	; 78
 3ca:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ce:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3d2:	86 b3       	in	r24, 0x16	; 22
 3d4:	86 bb       	out	0x16, r24	; 22
 3d6:	08 95       	ret

000003d8 <ini_timer0>:
 3d8:	14 bc       	out	0x24, r1	; 36
 3da:	16 bc       	out	0x26, r1	; 38
 3dc:	87 e0       	ldi	r24, 0x07	; 7
 3de:	85 bb       	out	0x15, r24	; 21
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	85 bd       	out	0x25, r24	; 37
 3ea:	08 95       	ret

000003ec <ini_USART>:
 3ec:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 3f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3f4:	8e ef       	ldi	r24, 0xFE	; 254
 3f6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 3fa:	88 e9       	ldi	r24, 0x98	; 152
 3fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 400:	86 e0       	ldi	r24, 0x06	; 6
 402:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 406:	08 95       	ret

00000408 <IR_Init>:
 408:	ac 01       	movw	r20, r24
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	0d c0       	rjmp	.+26     	; 0x42a <IR_Init+0x22>
 410:	f9 01       	movw	r30, r18
 412:	ee 0f       	add	r30, r30
 414:	ff 1f       	adc	r31, r31
 416:	e2 0f       	add	r30, r18
 418:	f3 1f       	adc	r31, r19
 41a:	e4 0f       	add	r30, r20
 41c:	f5 1f       	adc	r31, r21
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	90 83       	st	Z, r25
 422:	92 83       	std	Z+2, r25	; 0x02
 424:	11 82       	std	Z+1, r1	; 0x01
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	3f 4f       	sbci	r19, 0xFF	; 255
 42a:	24 30       	cpi	r18, 0x04	; 4
 42c:	31 05       	cpc	r19, r1
 42e:	84 f3       	brlt	.-32     	; 0x410 <IR_Init+0x8>
 430:	08 95       	ret

00000432 <IR_Update>:
 432:	fc 01       	movw	r30, r24
 434:	80 81       	ld	r24, Z
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	89 f0       	breq	.+34     	; 0x45c <IR_Update+0x2a>
 43a:	28 f0       	brcs	.+10     	; 0x446 <IR_Update+0x14>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	b1 f0       	breq	.+44     	; 0x46c <IR_Update+0x3a>
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	01 f1       	breq	.+64     	; 0x484 <IR_Update+0x52>
 444:	26 c0       	rjmp	.+76     	; 0x492 <IR_Update+0x60>
 446:	61 30       	cpi	r22, 0x01	; 1
 448:	31 f4       	brne	.+12     	; 0x456 <IR_Update+0x24>
 44a:	82 81       	ldd	r24, Z+2	; 0x02
 44c:	81 30       	cpi	r24, 0x01	; 1
 44e:	19 f4       	brne	.+6      	; 0x456 <IR_Update+0x24>
 450:	80 83       	st	Z, r24
 452:	81 83       	std	Z+1, r24	; 0x01
 454:	20 c0       	rjmp	.+64     	; 0x496 <IR_Update+0x64>
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	80 83       	st	Z, r24
 45a:	1d c0       	rjmp	.+58     	; 0x496 <IR_Update+0x64>
 45c:	61 11       	cpse	r22, r1
 45e:	03 c0       	rjmp	.+6      	; 0x466 <IR_Update+0x34>
 460:	82 e0       	ldi	r24, 0x02	; 2
 462:	80 83       	st	Z, r24
 464:	18 c0       	rjmp	.+48     	; 0x496 <IR_Update+0x64>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 83       	st	Z, r24
 46a:	15 c0       	rjmp	.+42     	; 0x496 <IR_Update+0x64>
 46c:	61 11       	cpse	r22, r1
 46e:	07 c0       	rjmp	.+14     	; 0x47e <IR_Update+0x4c>
 470:	82 81       	ldd	r24, Z+2	; 0x02
 472:	81 11       	cpse	r24, r1
 474:	04 c0       	rjmp	.+8      	; 0x47e <IR_Update+0x4c>
 476:	83 e0       	ldi	r24, 0x03	; 3
 478:	80 83       	st	Z, r24
 47a:	11 82       	std	Z+1, r1	; 0x01
 47c:	0c c0       	rjmp	.+24     	; 0x496 <IR_Update+0x64>
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	80 83       	st	Z, r24
 482:	09 c0       	rjmp	.+18     	; 0x496 <IR_Update+0x64>
 484:	61 30       	cpi	r22, 0x01	; 1
 486:	11 f4       	brne	.+4      	; 0x48c <IR_Update+0x5a>
 488:	10 82       	st	Z, r1
 48a:	05 c0       	rjmp	.+10     	; 0x496 <IR_Update+0x64>
 48c:	83 e0       	ldi	r24, 0x03	; 3
 48e:	80 83       	st	Z, r24
 490:	02 c0       	rjmp	.+4      	; 0x496 <IR_Update+0x64>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	80 83       	st	Z, r24
 496:	62 83       	std	Z+2, r22	; 0x02
 498:	08 95       	ret

0000049a <IR_GetState>:
 49a:	fc 01       	movw	r30, r24
 49c:	81 81       	ldd	r24, Z+1	; 0x01
 49e:	08 95       	ret

000004a0 <putHeaderOnTx>:
 4a0:	fc 01       	movw	r30, r24
 4a2:	15 82       	std	Z+5, r1	; 0x05
 4a4:	a0 81       	ld	r26, Z
 4a6:	b1 81       	ldd	r27, Z+1	; 0x01
 4a8:	83 81       	ldd	r24, Z+3	; 0x03
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	98 0f       	add	r25, r24
 4ae:	93 83       	std	Z+3, r25	; 0x03
 4b0:	a8 0f       	add	r26, r24
 4b2:	b1 1d       	adc	r27, r1
 4b4:	85 e5       	ldi	r24, 0x55	; 85
 4b6:	8c 93       	st	X, r24
 4b8:	84 81       	ldd	r24, Z+4	; 0x04
 4ba:	93 81       	ldd	r25, Z+3	; 0x03
 4bc:	98 23       	and	r25, r24
 4be:	a0 81       	ld	r26, Z
 4c0:	b1 81       	ldd	r27, Z+1	; 0x01
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	89 0f       	add	r24, r25
 4c6:	83 83       	std	Z+3, r24	; 0x03
 4c8:	a9 0f       	add	r26, r25
 4ca:	b1 1d       	adc	r27, r1
 4cc:	8e e4       	ldi	r24, 0x4E	; 78
 4ce:	8c 93       	st	X, r24
 4d0:	84 81       	ldd	r24, Z+4	; 0x04
 4d2:	93 81       	ldd	r25, Z+3	; 0x03
 4d4:	98 23       	and	r25, r24
 4d6:	a0 81       	ld	r26, Z
 4d8:	b1 81       	ldd	r27, Z+1	; 0x01
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	89 0f       	add	r24, r25
 4de:	83 83       	std	Z+3, r24	; 0x03
 4e0:	a9 0f       	add	r26, r25
 4e2:	b1 1d       	adc	r27, r1
 4e4:	85 e4       	ldi	r24, 0x45	; 69
 4e6:	8c 93       	st	X, r24
 4e8:	84 81       	ldd	r24, Z+4	; 0x04
 4ea:	93 81       	ldd	r25, Z+3	; 0x03
 4ec:	98 23       	and	r25, r24
 4ee:	a0 81       	ld	r26, Z
 4f0:	b1 81       	ldd	r27, Z+1	; 0x01
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	89 0f       	add	r24, r25
 4f6:	83 83       	std	Z+3, r24	; 0x03
 4f8:	a9 0f       	add	r26, r25
 4fa:	b1 1d       	adc	r27, r1
 4fc:	82 e5       	ldi	r24, 0x52	; 82
 4fe:	8c 93       	st	X, r24
 500:	84 81       	ldd	r24, Z+4	; 0x04
 502:	93 81       	ldd	r25, Z+3	; 0x03
 504:	98 23       	and	r25, r24
 506:	a0 81       	ld	r26, Z
 508:	b1 81       	ldd	r27, Z+1	; 0x01
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	89 0f       	add	r24, r25
 50e:	83 83       	std	Z+3, r24	; 0x03
 510:	a9 0f       	add	r26, r25
 512:	b1 1d       	adc	r27, r1
 514:	4f 5f       	subi	r20, 0xFF	; 255
 516:	4c 93       	st	X, r20
 518:	84 81       	ldd	r24, Z+4	; 0x04
 51a:	93 81       	ldd	r25, Z+3	; 0x03
 51c:	98 23       	and	r25, r24
 51e:	a0 81       	ld	r26, Z
 520:	b1 81       	ldd	r27, Z+1	; 0x01
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	89 0f       	add	r24, r25
 526:	83 83       	std	Z+3, r24	; 0x03
 528:	a9 0f       	add	r26, r25
 52a:	b1 1d       	adc	r27, r1
 52c:	8a e3       	ldi	r24, 0x3A	; 58
 52e:	8c 93       	st	X, r24
 530:	84 81       	ldd	r24, Z+4	; 0x04
 532:	93 81       	ldd	r25, Z+3	; 0x03
 534:	98 23       	and	r25, r24
 536:	a0 81       	ld	r26, Z
 538:	b1 81       	ldd	r27, Z+1	; 0x01
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	89 0f       	add	r24, r25
 53e:	83 83       	std	Z+3, r24	; 0x03
 540:	a9 0f       	add	r26, r25
 542:	b1 1d       	adc	r27, r1
 544:	6c 93       	st	X, r22
 546:	94 81       	ldd	r25, Z+4	; 0x04
 548:	83 81       	ldd	r24, Z+3	; 0x03
 54a:	98 23       	and	r25, r24
 54c:	93 83       	std	Z+3, r25	; 0x03
 54e:	95 81       	ldd	r25, Z+5	; 0x05
 550:	49 27       	eor	r20, r25
 552:	64 27       	eor	r22, r20
 554:	86 e3       	ldi	r24, 0x36	; 54
 556:	86 27       	eor	r24, r22
 558:	85 83       	std	Z+5, r24	; 0x05
 55a:	08 95       	ret

0000055c <putByteOnTx>:
 55c:	fc 01       	movw	r30, r24
 55e:	a0 81       	ld	r26, Z
 560:	b1 81       	ldd	r27, Z+1	; 0x01
 562:	83 81       	ldd	r24, Z+3	; 0x03
 564:	91 e0       	ldi	r25, 0x01	; 1
 566:	98 0f       	add	r25, r24
 568:	93 83       	std	Z+3, r25	; 0x03
 56a:	a8 0f       	add	r26, r24
 56c:	b1 1d       	adc	r27, r1
 56e:	6c 93       	st	X, r22
 570:	94 81       	ldd	r25, Z+4	; 0x04
 572:	83 81       	ldd	r24, Z+3	; 0x03
 574:	98 23       	and	r25, r24
 576:	93 83       	std	Z+3, r25	; 0x03
 578:	85 81       	ldd	r24, Z+5	; 0x05
 57a:	86 27       	eor	r24, r22
 57c:	85 83       	std	Z+5, r24	; 0x05
 57e:	08 95       	ret

00000580 <decodeCommand>:
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	eb 01       	movw	r28, r22
 58a:	dc 01       	movw	r26, r24
 58c:	ed 91       	ld	r30, X+
 58e:	fc 91       	ld	r31, X
 590:	11 97       	sbiw	r26, 0x01	; 1
 592:	14 96       	adiw	r26, 0x04	; 4
 594:	8c 91       	ld	r24, X
 596:	e8 0f       	add	r30, r24
 598:	f1 1d       	adc	r31, r1
 59a:	60 81       	ld	r22, Z
 59c:	68 3a       	cpi	r22, 0xA8	; 168
 59e:	78 f4       	brcc	.+30     	; 0x5be <decodeCommand+0x3e>
 5a0:	64 3a       	cpi	r22, 0xA4	; 164
 5a2:	08 f0       	brcs	.+2      	; 0x5a6 <decodeCommand+0x26>
 5a4:	8a c0       	rjmp	.+276    	; 0x6ba <decodeCommand+0x13a>
 5a6:	63 3a       	cpi	r22, 0xA3	; 163
 5a8:	08 f0       	brcs	.+2      	; 0x5ac <decodeCommand+0x2c>
 5aa:	41 c0       	rjmp	.+130    	; 0x62e <decodeCommand+0xae>
 5ac:	60 3a       	cpi	r22, 0xA0	; 160
 5ae:	08 f0       	brcs	.+2      	; 0x5b2 <decodeCommand+0x32>
 5b0:	84 c0       	rjmp	.+264    	; 0x6ba <decodeCommand+0x13a>
 5b2:	60 31       	cpi	r22, 0x10	; 16
 5b4:	01 f1       	breq	.+64     	; 0x5f6 <decodeCommand+0x76>
 5b6:	62 31       	cpi	r22, 0x12	; 18
 5b8:	09 f0       	breq	.+2      	; 0x5bc <decodeCommand+0x3c>
 5ba:	73 c0       	rjmp	.+230    	; 0x6a2 <decodeCommand+0x122>
 5bc:	7e c0       	rjmp	.+252    	; 0x6ba <decodeCommand+0x13a>
 5be:	6e 3d       	cpi	r22, 0xDE	; 222
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <decodeCommand+0x44>
 5c2:	7b c0       	rjmp	.+246    	; 0x6ba <decodeCommand+0x13a>
 5c4:	20 f4       	brcc	.+8      	; 0x5ce <decodeCommand+0x4e>
 5c6:	6a 3a       	cpi	r22, 0xAA	; 170
 5c8:	09 f4       	brne	.+2      	; 0x5cc <decodeCommand+0x4c>
 5ca:	47 c0       	rjmp	.+142    	; 0x65a <decodeCommand+0xda>
 5cc:	6a c0       	rjmp	.+212    	; 0x6a2 <decodeCommand+0x122>
 5ce:	60 3f       	cpi	r22, 0xF0	; 240
 5d0:	21 f0       	breq	.+8      	; 0x5da <decodeCommand+0x5a>
 5d2:	61 3f       	cpi	r22, 0xF1	; 241
 5d4:	09 f0       	breq	.+2      	; 0x5d8 <decodeCommand+0x58>
 5d6:	65 c0       	rjmp	.+202    	; 0x6a2 <decodeCommand+0x122>
 5d8:	70 c0       	rjmp	.+224    	; 0x6ba <decodeCommand+0x13a>
 5da:	42 e0       	ldi	r20, 0x02	; 2
 5dc:	60 ef       	ldi	r22, 0xF0	; 240
 5de:	ce 01       	movw	r24, r28
 5e0:	0e 94 50 02 	call	0x4a0	; 0x4a0 <putHeaderOnTx>
 5e4:	6d e0       	ldi	r22, 0x0D	; 13
 5e6:	ce 01       	movw	r24, r28
 5e8:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 5ec:	6d 81       	ldd	r22, Y+5	; 0x05
 5ee:	ce 01       	movw	r24, r28
 5f0:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 5f4:	62 c0       	rjmp	.+196    	; 0x6ba <decodeCommand+0x13a>
 5f6:	09 e4       	ldi	r16, 0x49	; 73
 5f8:	12 e0       	ldi	r17, 0x02	; 2
 5fa:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <state1>
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	f8 01       	movw	r30, r16
 602:	91 83       	std	Z+1, r25	; 0x01
 604:	80 83       	st	Z, r24
 606:	43 e0       	ldi	r20, 0x03	; 3
 608:	60 e1       	ldi	r22, 0x10	; 16
 60a:	ce 01       	movw	r24, r28
 60c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <putHeaderOnTx>
 610:	d8 01       	movw	r26, r16
 612:	6c 91       	ld	r22, X
 614:	ce 01       	movw	r24, r28
 616:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 61a:	f8 01       	movw	r30, r16
 61c:	61 81       	ldd	r22, Z+1	; 0x01
 61e:	ce 01       	movw	r24, r28
 620:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 624:	6d 81       	ldd	r22, Y+5	; 0x05
 626:	ce 01       	movw	r24, r28
 628:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 62c:	46 c0       	rjmp	.+140    	; 0x6ba <decodeCommand+0x13a>
 62e:	43 e0       	ldi	r20, 0x03	; 3
 630:	63 ea       	ldi	r22, 0xA3	; 163
 632:	ce 01       	movw	r24, r28
 634:	0e 94 50 02 	call	0x4a0	; 0x4a0 <putHeaderOnTx>
 638:	09 e4       	ldi	r16, 0x49	; 73
 63a:	12 e0       	ldi	r17, 0x02	; 2
 63c:	d8 01       	movw	r26, r16
 63e:	6c 91       	ld	r22, X
 640:	ce 01       	movw	r24, r28
 642:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 646:	f8 01       	movw	r30, r16
 648:	61 81       	ldd	r22, Z+1	; 0x01
 64a:	ce 01       	movw	r24, r28
 64c:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 650:	6d 81       	ldd	r22, Y+5	; 0x05
 652:	ce 01       	movw	r24, r28
 654:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 658:	30 c0       	rjmp	.+96     	; 0x6ba <decodeCommand+0x13a>
 65a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <Numbox>
 65e:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <Numbox+0x1>
 662:	ee 0f       	add	r30, r30
 664:	ff 1f       	adc	r31, r31
 666:	e7 5a       	subi	r30, 0xA7	; 167
 668:	fc 4f       	sbci	r31, 0xFC	; 252
 66a:	80 81       	ld	r24, Z
 66c:	09 e4       	ldi	r16, 0x49	; 73
 66e:	12 e0       	ldi	r17, 0x02	; 2
 670:	90 e0       	ldi	r25, 0x00	; 0
 672:	d8 01       	movw	r26, r16
 674:	8d 93       	st	X+, r24
 676:	9c 93       	st	X, r25
 678:	43 e0       	ldi	r20, 0x03	; 3
 67a:	6a ea       	ldi	r22, 0xAA	; 170
 67c:	ce 01       	movw	r24, r28
 67e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <putHeaderOnTx>
 682:	f8 01       	movw	r30, r16
 684:	60 81       	ld	r22, Z
 686:	ce 01       	movw	r24, r28
 688:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 68c:	d8 01       	movw	r26, r16
 68e:	11 96       	adiw	r26, 0x01	; 1
 690:	6c 91       	ld	r22, X
 692:	ce 01       	movw	r24, r28
 694:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 698:	6d 81       	ldd	r22, Y+5	; 0x05
 69a:	ce 01       	movw	r24, r28
 69c:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 6a0:	0c c0       	rjmp	.+24     	; 0x6ba <decodeCommand+0x13a>
 6a2:	42 e0       	ldi	r20, 0x02	; 2
 6a4:	ce 01       	movw	r24, r28
 6a6:	0e 94 50 02 	call	0x4a0	; 0x4a0 <putHeaderOnTx>
 6aa:	6f ef       	ldi	r22, 0xFF	; 255
 6ac:	ce 01       	movw	r24, r28
 6ae:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 6b2:	6d 81       	ldd	r22, Y+5	; 0x05
 6b4:	ce 01       	movw	r24, r28
 6b6:	0e 94 ae 02 	call	0x55c	; 0x55c <putByteOnTx>
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	1f 91       	pop	r17
 6c0:	0f 91       	pop	r16
 6c2:	08 95       	ret

000006c4 <decodeHeader>:
 6c4:	dc 01       	movw	r26, r24
 6c6:	13 96       	adiw	r26, 0x03	; 3
 6c8:	2c 91       	ld	r18, X
 6ca:	13 97       	sbiw	r26, 0x03	; 3
 6cc:	c9 c0       	rjmp	.+402    	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 6ce:	18 96       	adiw	r26, 0x08	; 8
 6d0:	ec 91       	ld	r30, X
 6d2:	18 97       	sbiw	r26, 0x08	; 8
 6d4:	4e 2f       	mov	r20, r30
 6d6:	50 e0       	ldi	r21, 0x00	; 0
 6d8:	47 30       	cpi	r20, 0x07	; 7
 6da:	51 05       	cpc	r21, r1
 6dc:	08 f0       	brcs	.+2      	; 0x6e0 <decodeHeader+0x1c>
 6de:	b2 c0       	rjmp	.+356    	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 6e0:	fa 01       	movw	r30, r20
 6e2:	ec 5c       	subi	r30, 0xCC	; 204
 6e4:	ff 4f       	sbci	r31, 0xFF	; 255
 6e6:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__tablejump2__>
 6ea:	ed 91       	ld	r30, X+
 6ec:	fc 91       	ld	r31, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	e8 0f       	add	r30, r24
 6f2:	f1 1d       	adc	r31, r1
 6f4:	80 81       	ld	r24, Z
 6f6:	85 35       	cpi	r24, 0x55	; 85
 6f8:	09 f0       	breq	.+2      	; 0x6fc <decodeHeader+0x38>
 6fa:	a7 c0       	rjmp	.+334    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	18 96       	adiw	r26, 0x08	; 8
 700:	8c 93       	st	X, r24
 702:	18 97       	sbiw	r26, 0x08	; 8
 704:	a2 c0       	rjmp	.+324    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 706:	ed 91       	ld	r30, X+
 708:	fc 91       	ld	r31, X
 70a:	11 97       	sbiw	r26, 0x01	; 1
 70c:	e8 0f       	add	r30, r24
 70e:	f1 1d       	adc	r31, r1
 710:	90 81       	ld	r25, Z
 712:	9e 34       	cpi	r25, 0x4E	; 78
 714:	29 f4       	brne	.+10     	; 0x720 <decodeHeader+0x5c>
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	18 96       	adiw	r26, 0x08	; 8
 71a:	8c 93       	st	X, r24
 71c:	18 97       	sbiw	r26, 0x08	; 8
 71e:	95 c0       	rjmp	.+298    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 720:	95 35       	cpi	r25, 0x55	; 85
 722:	09 f4       	brne	.+2      	; 0x726 <decodeHeader+0x62>
 724:	92 c0       	rjmp	.+292    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 726:	18 96       	adiw	r26, 0x08	; 8
 728:	1c 92       	st	X, r1
 72a:	18 97       	sbiw	r26, 0x08	; 8
 72c:	81 50       	subi	r24, 0x01	; 1
 72e:	12 96       	adiw	r26, 0x02	; 2
 730:	8c 93       	st	X, r24
 732:	12 97       	sbiw	r26, 0x02	; 2
 734:	8a c0       	rjmp	.+276    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 736:	ed 91       	ld	r30, X+
 738:	fc 91       	ld	r31, X
 73a:	11 97       	sbiw	r26, 0x01	; 1
 73c:	e8 0f       	add	r30, r24
 73e:	f1 1d       	adc	r31, r1
 740:	90 81       	ld	r25, Z
 742:	95 34       	cpi	r25, 0x45	; 69
 744:	29 f4       	brne	.+10     	; 0x750 <decodeHeader+0x8c>
 746:	83 e0       	ldi	r24, 0x03	; 3
 748:	18 96       	adiw	r26, 0x08	; 8
 74a:	8c 93       	st	X, r24
 74c:	18 97       	sbiw	r26, 0x08	; 8
 74e:	7d c0       	rjmp	.+250    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 750:	18 96       	adiw	r26, 0x08	; 8
 752:	1c 92       	st	X, r1
 754:	18 97       	sbiw	r26, 0x08	; 8
 756:	81 50       	subi	r24, 0x01	; 1
 758:	12 96       	adiw	r26, 0x02	; 2
 75a:	8c 93       	st	X, r24
 75c:	12 97       	sbiw	r26, 0x02	; 2
 75e:	75 c0       	rjmp	.+234    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 760:	ed 91       	ld	r30, X+
 762:	fc 91       	ld	r31, X
 764:	11 97       	sbiw	r26, 0x01	; 1
 766:	e8 0f       	add	r30, r24
 768:	f1 1d       	adc	r31, r1
 76a:	90 81       	ld	r25, Z
 76c:	92 35       	cpi	r25, 0x52	; 82
 76e:	29 f4       	brne	.+10     	; 0x77a <decodeHeader+0xb6>
 770:	84 e0       	ldi	r24, 0x04	; 4
 772:	18 96       	adiw	r26, 0x08	; 8
 774:	8c 93       	st	X, r24
 776:	18 97       	sbiw	r26, 0x08	; 8
 778:	68 c0       	rjmp	.+208    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 77a:	18 96       	adiw	r26, 0x08	; 8
 77c:	1c 92       	st	X, r1
 77e:	18 97       	sbiw	r26, 0x08	; 8
 780:	81 50       	subi	r24, 0x01	; 1
 782:	12 96       	adiw	r26, 0x02	; 2
 784:	8c 93       	st	X, r24
 786:	12 97       	sbiw	r26, 0x02	; 2
 788:	60 c0       	rjmp	.+192    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 78a:	ed 91       	ld	r30, X+
 78c:	fc 91       	ld	r31, X
 78e:	11 97       	sbiw	r26, 0x01	; 1
 790:	e8 0f       	add	r30, r24
 792:	f1 1d       	adc	r31, r1
 794:	80 81       	ld	r24, Z
 796:	17 96       	adiw	r26, 0x07	; 7
 798:	8c 93       	st	X, r24
 79a:	17 97       	sbiw	r26, 0x07	; 7
 79c:	85 e0       	ldi	r24, 0x05	; 5
 79e:	18 96       	adiw	r26, 0x08	; 8
 7a0:	8c 93       	st	X, r24
 7a2:	18 97       	sbiw	r26, 0x08	; 8
 7a4:	52 c0       	rjmp	.+164    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 7a6:	ed 91       	ld	r30, X+
 7a8:	fc 91       	ld	r31, X
 7aa:	11 97       	sbiw	r26, 0x01	; 1
 7ac:	e8 0f       	add	r30, r24
 7ae:	f1 1d       	adc	r31, r1
 7b0:	90 81       	ld	r25, Z
 7b2:	9a 33       	cpi	r25, 0x3A	; 58
 7b4:	a9 f4       	brne	.+42     	; 0x7e0 <decodeHeader+0x11c>
 7b6:	96 e0       	ldi	r25, 0x06	; 6
 7b8:	18 96       	adiw	r26, 0x08	; 8
 7ba:	9c 93       	st	X, r25
 7bc:	18 97       	sbiw	r26, 0x08	; 8
 7be:	8f 5f       	subi	r24, 0xFF	; 255
 7c0:	15 96       	adiw	r26, 0x05	; 5
 7c2:	9c 91       	ld	r25, X
 7c4:	15 97       	sbiw	r26, 0x05	; 5
 7c6:	89 23       	and	r24, r25
 7c8:	14 96       	adiw	r26, 0x04	; 4
 7ca:	8c 93       	st	X, r24
 7cc:	14 97       	sbiw	r26, 0x04	; 4
 7ce:	17 96       	adiw	r26, 0x07	; 7
 7d0:	9c 91       	ld	r25, X
 7d2:	17 97       	sbiw	r26, 0x07	; 7
 7d4:	86 e3       	ldi	r24, 0x36	; 54
 7d6:	89 27       	eor	r24, r25
 7d8:	16 96       	adiw	r26, 0x06	; 6
 7da:	8c 93       	st	X, r24
 7dc:	16 97       	sbiw	r26, 0x06	; 6
 7de:	35 c0       	rjmp	.+106    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 7e0:	18 96       	adiw	r26, 0x08	; 8
 7e2:	1c 92       	st	X, r1
 7e4:	18 97       	sbiw	r26, 0x08	; 8
 7e6:	81 50       	subi	r24, 0x01	; 1
 7e8:	12 96       	adiw	r26, 0x02	; 2
 7ea:	8c 93       	st	X, r24
 7ec:	12 97       	sbiw	r26, 0x02	; 2
 7ee:	2d c0       	rjmp	.+90     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 7f0:	17 96       	adiw	r26, 0x07	; 7
 7f2:	9c 91       	ld	r25, X
 7f4:	17 97       	sbiw	r26, 0x07	; 7
 7f6:	91 50       	subi	r25, 0x01	; 1
 7f8:	17 96       	adiw	r26, 0x07	; 7
 7fa:	9c 93       	st	X, r25
 7fc:	17 97       	sbiw	r26, 0x07	; 7
 7fe:	99 23       	and	r25, r25
 800:	71 f0       	breq	.+28     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 802:	ed 91       	ld	r30, X+
 804:	fc 91       	ld	r31, X
 806:	11 97       	sbiw	r26, 0x01	; 1
 808:	e8 0f       	add	r30, r24
 80a:	f1 1d       	adc	r31, r1
 80c:	80 81       	ld	r24, Z
 80e:	16 96       	adiw	r26, 0x06	; 6
 810:	9c 91       	ld	r25, X
 812:	16 97       	sbiw	r26, 0x06	; 6
 814:	89 27       	eor	r24, r25
 816:	16 96       	adiw	r26, 0x06	; 6
 818:	8c 93       	st	X, r24
 81a:	16 97       	sbiw	r26, 0x06	; 6
 81c:	16 c0       	rjmp	.+44     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 81e:	18 96       	adiw	r26, 0x08	; 8
 820:	1c 92       	st	X, r1
 822:	18 97       	sbiw	r26, 0x08	; 8
 824:	ed 91       	ld	r30, X+
 826:	fc 91       	ld	r31, X
 828:	11 97       	sbiw	r26, 0x01	; 1
 82a:	e8 0f       	add	r30, r24
 82c:	f1 1d       	adc	r31, r1
 82e:	90 81       	ld	r25, Z
 830:	16 96       	adiw	r26, 0x06	; 6
 832:	8c 91       	ld	r24, X
 834:	16 97       	sbiw	r26, 0x06	; 6
 836:	98 13       	cpse	r25, r24
 838:	08 c0       	rjmp	.+16     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	1a 96       	adiw	r26, 0x0a	; 10
 83e:	8c 93       	st	X, r24
 840:	1a 97       	sbiw	r26, 0x0a	; 10
 842:	03 c0       	rjmp	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 844:	18 96       	adiw	r26, 0x08	; 8
 846:	1c 92       	st	X, r1
 848:	18 97       	sbiw	r26, 0x08	; 8
 84a:	12 96       	adiw	r26, 0x02	; 2
 84c:	8c 91       	ld	r24, X
 84e:	12 97       	sbiw	r26, 0x02	; 2
 850:	8f 5f       	subi	r24, 0xFF	; 255
 852:	15 96       	adiw	r26, 0x05	; 5
 854:	9c 91       	ld	r25, X
 856:	15 97       	sbiw	r26, 0x05	; 5
 858:	89 23       	and	r24, r25
 85a:	12 96       	adiw	r26, 0x02	; 2
 85c:	8c 93       	st	X, r24
 85e:	12 97       	sbiw	r26, 0x02	; 2
 860:	12 96       	adiw	r26, 0x02	; 2
 862:	8c 91       	ld	r24, X
 864:	12 97       	sbiw	r26, 0x02	; 2
 866:	28 13       	cpse	r18, r24
 868:	32 cf       	rjmp	.-412    	; 0x6ce <decodeHeader+0xa>
 86a:	08 95       	ret

0000086c <serialTask>:
 86c:	0f 93       	push	r16
 86e:	1f 93       	push	r17
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	8c 01       	movw	r16, r24
 876:	eb 01       	movw	r28, r22
 878:	fc 01       	movw	r30, r24
 87a:	82 85       	ldd	r24, Z+10	; 0x0a
 87c:	88 23       	and	r24, r24
 87e:	21 f0       	breq	.+8      	; 0x888 <serialTask+0x1c>
 880:	12 86       	std	Z+10, r1	; 0x0a
 882:	c8 01       	movw	r24, r16
 884:	0e 94 c0 02 	call	0x580	; 0x580 <decodeCommand>
 888:	f8 01       	movw	r30, r16
 88a:	92 81       	ldd	r25, Z+2	; 0x02
 88c:	83 81       	ldd	r24, Z+3	; 0x03
 88e:	98 17       	cp	r25, r24
 890:	19 f0       	breq	.+6      	; 0x898 <serialTask+0x2c>
 892:	c8 01       	movw	r24, r16
 894:	0e 94 62 03 	call	0x6c4	; 0x6c4 <decodeHeader>
 898:	8a 81       	ldd	r24, Y+2	; 0x02
 89a:	9b 81       	ldd	r25, Y+3	; 0x03
 89c:	89 17       	cp	r24, r25
 89e:	91 f0       	breq	.+36     	; 0x8c4 <serialTask+0x58>
 8a0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 8a4:	95 ff       	sbrs	r25, 5
 8a6:	0e c0       	rjmp	.+28     	; 0x8c4 <serialTask+0x58>
 8a8:	e8 81       	ld	r30, Y
 8aa:	f9 81       	ldd	r31, Y+1	; 0x01
 8ac:	91 e0       	ldi	r25, 0x01	; 1
 8ae:	98 0f       	add	r25, r24
 8b0:	9a 83       	std	Y+2, r25	; 0x02
 8b2:	e8 0f       	add	r30, r24
 8b4:	f1 1d       	adc	r31, r1
 8b6:	80 81       	ld	r24, Z
 8b8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 8bc:	8c 81       	ldd	r24, Y+4	; 0x04
 8be:	9a 81       	ldd	r25, Y+2	; 0x02
 8c0:	89 23       	and	r24, r25
 8c2:	8a 83       	std	Y+2, r24	; 0x02
 8c4:	df 91       	pop	r29
 8c6:	cf 91       	pop	r28
 8c8:	1f 91       	pop	r17
 8ca:	0f 91       	pop	r16
 8cc:	08 95       	ret

000008ce <sensorMeasure>:
 8ce:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <globalDistance+0x1>
 8d2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <globalDistance>
 8d6:	08 95       	ret

000008d8 <newBox>:
	
}

void newBox(uint16_t distance){
 8d8:	cf 93       	push	r28
 8da:	df 93       	push	r29
 8dc:	ec 01       	movw	r28, r24
	if(IR_GetState(&ir_sensor[0]) == 0x01){
 8de:	8d e4       	ldi	r24, 0x4D	; 77
 8e0:	92 e0       	ldi	r25, 0x02	; 2
 8e2:	0e 94 4d 02 	call	0x49a	; 0x49a <IR_GetState>
 8e6:	81 30       	cpi	r24, 0x01	; 1
 8e8:	39 f4       	brne	.+14     	; 0x8f8 <newBox+0x20>
		if(distance<18)
 8ea:	62 97       	sbiw	r28, 0x12	; 18
 8ec:	28 f4       	brcc	.+10     	; 0x8f8 <newBox+0x20>
			MEASURINGBOX=TRUE;
 8ee:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <flag0>
 8f2:	82 60       	ori	r24, 0x02	; 2
 8f4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <flag0>
	}
}
 8f8:	df 91       	pop	r29
 8fa:	cf 91       	pop	r28
 8fc:	08 95       	ret

000008fe <every10ms>:
		dataRx->indexR++;
		dataRx->indexR &= dataRx->mask;
	}
}

void every10ms(){
 8fe:	cf 93       	push	r28
 900:	df 93       	push	r29
	
	if (!count100ms){		//Si pasaron 100ms
 902:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count100ms>
 906:	81 11       	cpse	r24, r1
 908:	1b c0       	rjmp	.+54     	; 0x940 <__stack+0x41>

uint32_t	HCSR_1;
uint16_t	aux16 = 0;

static inline void on_reset_hcsr(){
	aux16 = TCNT1;								// Loads actual time in TCNT1 into aux16
 90a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 90e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
	aux16 += 20;								// 20*500ns = 10us (tiempo del trigger), Adds 10 (us) to the previously saved time at TCNT1
 912:	44 96       	adiw	r24, 0x14	; 20
 914:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <aux16+0x1>
 918:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <aux16>
	OCR1B = aux16;								// Then loads the value into OCR1B, generating an Output Compare Interrupt
 91c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 920:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	TIFR1 = (1<<OCF1B) | (1<<OCF1A);			// Flag set after the counter value in TCNT1 equals OCR1A and OCR1B
 924:	86 e0       	ldi	r24, 0x06	; 6
 926:	86 bb       	out	0x16, r24	; 22
	TIMSK1 = (1<<OCIE1B);			// Habilita interrupciones B 
 928:	84 e0       	ldi	r24, 0x04	; 4
 92a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
	HCSR04_Start(HCSR_1);						// Trigger en HIGH
 92e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <HCSR_1>
 932:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <HCSR_1+0x1>
 936:	0e 94 87 00 	call	0x10e	; 0x10e <HCSR04_Start>
		on_reset_hcsr();
		//state1 = IR_GetState(&ir_sensor[0]);
		count100ms = 10;
 93a:	8a e0       	ldi	r24, 0x0A	; 10
 93c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count100ms>
	}
	
	if (!count40ms){
 940:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count40ms>
 944:	88 23       	and	r24, r24
 946:	81 f0       	breq	.+32     	; 0x968 <__stack+0x69>
 948:	1d c0       	rjmp	.+58     	; 0x984 <__stack+0x85>
		for(int i=0;i<4;i++){
			IR_Update(&ir_sensor[i], raw_input[i]);
 94a:	fe 01       	movw	r30, r28
 94c:	ec 5b       	subi	r30, 0xBC	; 188
 94e:	fd 4f       	sbci	r31, 0xFD	; 253
 950:	ce 01       	movw	r24, r28
 952:	88 0f       	add	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	8c 0f       	add	r24, r28
 958:	9d 1f       	adc	r25, r29
 95a:	60 81       	ld	r22, Z
 95c:	83 5b       	subi	r24, 0xB3	; 179
 95e:	9d 4f       	sbci	r25, 0xFD	; 253
 960:	0e 94 19 02 	call	0x432	; 0x432 <IR_Update>
		//state1 = IR_GetState(&ir_sensor[0]);
		count100ms = 10;
	}
	
	if (!count40ms){
		for(int i=0;i<4;i++){
 964:	21 96       	adiw	r28, 0x01	; 1
 966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x6d>
 968:	c0 e0       	ldi	r28, 0x00	; 0
 96a:	d0 e0       	ldi	r29, 0x00	; 0
 96c:	c4 30       	cpi	r28, 0x04	; 4
 96e:	d1 05       	cpc	r29, r1
 970:	64 f3       	brlt	.-40     	; 0x94a <__stack+0x4b>
			IR_Update(&ir_sensor[i], raw_input[i]);
		}
		count40ms = 4;
 972:	84 e0       	ldi	r24, 0x04	; 4
 974:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count40ms>
		newBox(globalDistance);
 978:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <globalDistance>
 97c:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <globalDistance+0x1>
 980:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <newBox>
	}
	
	raw_input[0] = (PIND & (1<<IR0)) ? 1 : 0;
 984:	89 b1       	in	r24, 0x09	; 9
 986:	82 fb       	bst	r24, 2
 988:	88 27       	eor	r24, r24
 98a:	80 f9       	bld	r24, 0
 98c:	e4 e4       	ldi	r30, 0x44	; 68
 98e:	f2 e0       	ldi	r31, 0x02	; 2
 990:	80 83       	st	Z, r24
	raw_input[1] = (PIND & (1<<IR1)) ? 1 : 0;
 992:	89 b1       	in	r24, 0x09	; 9
 994:	83 fb       	bst	r24, 3
 996:	88 27       	eor	r24, r24
 998:	80 f9       	bld	r24, 0
 99a:	81 83       	std	Z+1, r24	; 0x01
	raw_input[2] = (PIND & (1<<IR2)) ? 1 : 0;
 99c:	89 b1       	in	r24, 0x09	; 9
 99e:	82 95       	swap	r24
 9a0:	81 70       	andi	r24, 0x01	; 1
 9a2:	82 83       	std	Z+2, r24	; 0x02
	raw_input[3] = (PIND & (1<<IR3)) ? 1 : 0;
 9a4:	89 b1       	in	r24, 0x09	; 9
 9a6:	85 fb       	bst	r24, 5
 9a8:	88 27       	eor	r24, r24
 9aa:	80 f9       	bld	r24, 0
 9ac:	83 83       	std	Z+3, r24	; 0x03
	
	IS10MS = FALSE;
 9ae:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <flag0>
 9b2:	8e 7f       	andi	r24, 0xFE	; 254
 9b4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <flag0>
	count100ms--;
 9b8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <count100ms>
 9bc:	81 50       	subi	r24, 0x01	; 1
 9be:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <count100ms>
	count40ms--;
 9c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <count40ms>
 9c6:	81 50       	subi	r24, 0x01	; 1
 9c8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <count40ms>
}
 9cc:	df 91       	pop	r29
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <main>:

/* END Function prototypes user code ------------------------------------------*/

int main(){
	
	cli();
 9d2:	f8 94       	cli

	/* END Local variables -------------------------------------------------------*/


	/* User code Init ------------------------------------------------------------*/
	flag0.byte = 0;
 9d4:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <flag0>
	
	ini_ports();
 9d8:	0e 94 c8 01 	call	0x390	; 0x390 <ini_ports>
	ini_timer1();
 9dc:	0e 94 d7 01 	call	0x3ae	; 0x3ae <ini_timer1>
	ini_timer0();
 9e0:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <ini_timer0>
	ini_USART(16);
 9e4:	80 e1       	ldi	r24, 0x10	; 16
 9e6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <ini_USART>
	
	IR_Init(&ir_sensor[0]);
 9ea:	8d e4       	ldi	r24, 0x4D	; 77
 9ec:	92 e0       	ldi	r25, 0x02	; 2
 9ee:	0e 94 04 02 	call	0x408	; 0x408 <IR_Init>
	
	addServo(&PORTD,SV0);
 9f2:	67 e0       	ldi	r22, 0x07	; 7
 9f4:	8b e2       	ldi	r24, 0x2B	; 43
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	0e 94 54 05 	call	0xaa8	; 0xaa8 <addServo>
	addServo(&PORTB,SV1);
 9fc:	64 e0       	ldi	r22, 0x04	; 4
 9fe:	85 e2       	ldi	r24, 0x25	; 37
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	0e 94 54 05 	call	0xaa8	; 0xaa8 <addServo>
	addServo(&PORTB,SV2);
 a06:	63 e0       	ldi	r22, 0x03	; 3
 a08:	85 e2       	ldi	r24, 0x25	; 37
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	0e 94 54 05 	call	0xaa8	; 0xaa8 <addServo>
	
	HCSR_1 = HCSR04_AddNew(&WritePin_HCSR, 16);
 a10:	40 e1       	ldi	r20, 0x10	; 16
 a12:	50 e0       	ldi	r21, 0x00	; 0
 a14:	60 e0       	ldi	r22, 0x00	; 0
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	88 ed       	ldi	r24, 0xD8	; 216
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 94 5a 00 	call	0xb4	; 0xb4 <HCSR04_AddNew>
 a20:	a0 e0       	ldi	r26, 0x00	; 0
 a22:	b0 e0       	ldi	r27, 0x00	; 0
 a24:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <HCSR_1>
 a28:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <HCSR_1+0x1>
 a2c:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <HCSR_1+0x2>
 a30:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <HCSR_1+0x3>
	
	dataRx.buff = (uint8_t *)buffRx;
 a34:	e2 e3       	ldi	r30, 0x32	; 50
 a36:	f2 e0       	ldi	r31, 0x02	; 2
 a38:	86 e2       	ldi	r24, 0x26	; 38
 a3a:	91 e0       	ldi	r25, 0x01	; 1
 a3c:	91 83       	std	Z+1, r25	; 0x01
 a3e:	80 83       	st	Z, r24
	dataRx.indexR = 0;
 a40:	12 82       	std	Z+2, r1	; 0x02
	dataRx.indexW = 0;
 a42:	13 82       	std	Z+3, r1	; 0x03
	dataRx.header = HEADER_U;
 a44:	10 86       	std	Z+8, r1	; 0x08
	dataRx.mask = RXBUFSIZE - 1;
 a46:	8f ef       	ldi	r24, 0xFF	; 255
 a48:	85 83       	std	Z+5, r24	; 0x05
	
	dataTx.buff = buffTx;
 a4a:	ed e3       	ldi	r30, 0x3D	; 61
 a4c:	f2 e0       	ldi	r31, 0x02	; 2
 a4e:	29 e5       	ldi	r18, 0x59	; 89
 a50:	32 e0       	ldi	r19, 0x02	; 2
 a52:	31 83       	std	Z+1, r19	; 0x01
 a54:	20 83       	st	Z, r18
	dataTx.indexR = 0;
 a56:	12 82       	std	Z+2, r1	; 0x02
	dataTx.indexW = 0;
 a58:	13 82       	std	Z+3, r1	; 0x03
	dataTx.mask = TXBUFSIZE -1;
 a5a:	84 83       	std	Z+4, r24	; 0x04
	
	boxSizeconfig.smallboxF=Cm15;
 a5c:	e6 e2       	ldi	r30, 0x26	; 38
 a5e:	f2 e0       	ldi	r31, 0x02	; 2
 a60:	86 e6       	ldi	r24, 0x66	; 102
 a62:	93 e0       	ldi	r25, 0x03	; 3
 a64:	91 83       	std	Z+1, r25	; 0x01
 a66:	80 83       	st	Z, r24
	boxSizeconfig.smallboxC=Cm13;
 a68:	82 ef       	ldi	r24, 0xF2	; 242
 a6a:	92 e0       	ldi	r25, 0x02	; 2
 a6c:	93 83       	std	Z+3, r25	; 0x03
 a6e:	82 83       	std	Z+2, r24	; 0x02
	boxSizeconfig.mediumboxF=Cm13;
 a70:	95 83       	std	Z+5, r25	; 0x05
 a72:	84 83       	std	Z+4, r24	; 0x04
	boxSizeconfig.mediumboxC=Cm11;
 a74:	8e e7       	ldi	r24, 0x7E	; 126
 a76:	92 e0       	ldi	r25, 0x02	; 2
 a78:	97 83       	std	Z+7, r25	; 0x07
 a7a:	86 83       	std	Z+6, r24	; 0x06
	boxSizeconfig.largeboxF=Cm11;
 a7c:	91 87       	std	Z+9, r25	; 0x09
 a7e:	80 87       	std	Z+8, r24	; 0x08
	boxSizeconfig.largeboxC=Cm9;
 a80:	8a e0       	ldi	r24, 0x0A	; 10
 a82:	92 e0       	ldi	r25, 0x02	; 2
 a84:	93 87       	std	Z+11, r25	; 0x0b
 a86:	82 87       	std	Z+10, r24	; 0x0a
	
	/* END User code Init --------------------------------------------------------*/
	sei();
 a88:	78 94       	sei

	while (1){
		/* User Code loop ------------------------------------------------------------*/
		task_HCSR();
 a8a:	0e 94 af 00 	call	0x15e	; 0x15e <task_HCSR>
		serialTask(&dataRx,&dataTx);
 a8e:	6d e3       	ldi	r22, 0x3D	; 61
 a90:	72 e0       	ldi	r23, 0x02	; 2
 a92:	82 e3       	ldi	r24, 0x32	; 50
 a94:	92 e0       	ldi	r25, 0x02	; 2
 a96:	0e 94 36 04 	call	0x86c	; 0x86c <serialTask>
		if (IS10MS)
 a9a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <flag0>
 a9e:	80 ff       	sbrs	r24, 0
 aa0:	f4 cf       	rjmp	.-24     	; 0xa8a <main+0xb8>
			every10ms();
 aa2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <every10ms>
 aa6:	f1 cf       	rjmp	.-30     	; 0xa8a <main+0xb8>

00000aa8 <addServo>:
 aa8:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <ServN>
 aac:	e2 2f       	mov	r30, r18
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	af 01       	movw	r20, r30
 ab2:	44 0f       	add	r20, r20
 ab4:	55 1f       	adc	r21, r21
 ab6:	44 0f       	add	r20, r20
 ab8:	55 1f       	adc	r21, r21
 aba:	e4 0f       	add	r30, r20
 abc:	f5 1f       	adc	r31, r21
 abe:	ef 5e       	subi	r30, 0xEF	; 239
 ac0:	fe 4f       	sbci	r31, 0xFE	; 254
 ac2:	62 83       	std	Z+2, r22	; 0x02
 ac4:	91 83       	std	Z+1, r25	; 0x01
 ac6:	80 83       	st	Z, r24
 ac8:	2f 5f       	subi	r18, 0xFF	; 255
 aca:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <ServN>
 ace:	08 95       	ret

00000ad0 <writeServo>:
 ad0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <is20ms>
 ad4:	81 50       	subi	r24, 0x01	; 1
 ad6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <is20ms>
 ada:	20 e0       	ldi	r18, 0x00	; 0
 adc:	2a c0       	rjmp	.+84     	; 0xb32 <writeServo+0x62>
 ade:	82 2f       	mov	r24, r18
 ae0:	90 e0       	ldi	r25, 0x00	; 0
 ae2:	fc 01       	movw	r30, r24
 ae4:	ee 0f       	add	r30, r30
 ae6:	ff 1f       	adc	r31, r31
 ae8:	ee 0f       	add	r30, r30
 aea:	ff 1f       	adc	r31, r31
 aec:	e8 0f       	add	r30, r24
 aee:	f9 1f       	adc	r31, r25
 af0:	ef 5e       	subi	r30, 0xEF	; 239
 af2:	fe 4f       	sbci	r31, 0xFE	; 254
 af4:	33 81       	ldd	r19, Z+3	; 0x03
 af6:	31 50       	subi	r19, 0x01	; 1
 af8:	33 83       	std	Z+3, r19	; 0x03
 afa:	33 81       	ldd	r19, Z+3	; 0x03
 afc:	31 11       	cpse	r19, r1
 afe:	18 c0       	rjmp	.+48     	; 0xb30 <writeServo+0x60>
 b00:	fc 01       	movw	r30, r24
 b02:	ee 0f       	add	r30, r30
 b04:	ff 1f       	adc	r31, r31
 b06:	ee 0f       	add	r30, r30
 b08:	ff 1f       	adc	r31, r31
 b0a:	8e 0f       	add	r24, r30
 b0c:	9f 1f       	adc	r25, r31
 b0e:	fc 01       	movw	r30, r24
 b10:	ef 5e       	subi	r30, 0xEF	; 239
 b12:	fe 4f       	sbci	r31, 0xFE	; 254
 b14:	a0 81       	ld	r26, Z
 b16:	b1 81       	ldd	r27, Z+1	; 0x01
 b18:	3c 91       	ld	r19, X
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	02 80       	ldd	r0, Z+2	; 0x02
 b20:	02 c0       	rjmp	.+4      	; 0xb26 <writeServo+0x56>
 b22:	88 0f       	add	r24, r24
 b24:	99 1f       	adc	r25, r25
 b26:	0a 94       	dec	r0
 b28:	e2 f7       	brpl	.-8      	; 0xb22 <writeServo+0x52>
 b2a:	80 95       	com	r24
 b2c:	83 23       	and	r24, r19
 b2e:	8c 93       	st	X, r24
 b30:	2f 5f       	subi	r18, 0xFF	; 255
 b32:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <ServN>
 b36:	28 17       	cp	r18, r24
 b38:	90 f2       	brcs	.-92     	; 0xade <writeServo+0xe>
 b3a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <is20ms>
 b3e:	99 23       	and	r25, r25
 b40:	e9 f0       	breq	.+58     	; 0xb7c <writeServo+0xac>
 b42:	08 95       	ret
 b44:	e9 2f       	mov	r30, r25
 b46:	f0 e0       	ldi	r31, 0x00	; 0
 b48:	9f 01       	movw	r18, r30
 b4a:	22 0f       	add	r18, r18
 b4c:	33 1f       	adc	r19, r19
 b4e:	22 0f       	add	r18, r18
 b50:	33 1f       	adc	r19, r19
 b52:	e2 0f       	add	r30, r18
 b54:	f3 1f       	adc	r31, r19
 b56:	ef 5e       	subi	r30, 0xEF	; 239
 b58:	fe 4f       	sbci	r31, 0xFE	; 254
 b5a:	24 81       	ldd	r18, Z+4	; 0x04
 b5c:	23 83       	std	Z+3, r18	; 0x03
 b5e:	a0 81       	ld	r26, Z
 b60:	b1 81       	ldd	r27, Z+1	; 0x01
 b62:	4c 91       	ld	r20, X
 b64:	21 e0       	ldi	r18, 0x01	; 1
 b66:	30 e0       	ldi	r19, 0x00	; 0
 b68:	02 80       	ldd	r0, Z+2	; 0x02
 b6a:	02 c0       	rjmp	.+4      	; 0xb70 <writeServo+0xa0>
 b6c:	22 0f       	add	r18, r18
 b6e:	33 1f       	adc	r19, r19
 b70:	0a 94       	dec	r0
 b72:	e2 f7       	brpl	.-8      	; 0xb6c <writeServo+0x9c>
 b74:	24 2b       	or	r18, r20
 b76:	2c 93       	st	X, r18
 b78:	9f 5f       	subi	r25, 0xFF	; 255
 b7a:	01 c0       	rjmp	.+2      	; 0xb7e <writeServo+0xae>
 b7c:	90 e0       	ldi	r25, 0x00	; 0
 b7e:	98 17       	cp	r25, r24
 b80:	08 f3       	brcs	.-62     	; 0xb44 <writeServo+0x74>
 b82:	8c e9       	ldi	r24, 0x9C	; 156
 b84:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <is20ms>
 b88:	08 95       	ret

00000b8a <__tablejump2__>:
 b8a:	ee 0f       	add	r30, r30
 b8c:	ff 1f       	adc	r31, r31
 b8e:	05 90       	lpm	r0, Z+
 b90:	f4 91       	lpm	r31, Z
 b92:	e0 2d       	mov	r30, r0
 b94:	09 94       	ijmp

00000b96 <malloc>:
 b96:	0f 93       	push	r16
 b98:	1f 93       	push	r17
 b9a:	cf 93       	push	r28
 b9c:	df 93       	push	r29
 b9e:	82 30       	cpi	r24, 0x02	; 2
 ba0:	91 05       	cpc	r25, r1
 ba2:	10 f4       	brcc	.+4      	; 0xba8 <malloc+0x12>
 ba4:	82 e0       	ldi	r24, 0x02	; 2
 ba6:	90 e0       	ldi	r25, 0x00	; 0
 ba8:	e0 91 79 03 	lds	r30, 0x0379	; 0x800379 <__flp>
 bac:	f0 91 7a 03 	lds	r31, 0x037A	; 0x80037a <__flp+0x1>
 bb0:	20 e0       	ldi	r18, 0x00	; 0
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	a0 e0       	ldi	r26, 0x00	; 0
 bb6:	b0 e0       	ldi	r27, 0x00	; 0
 bb8:	30 97       	sbiw	r30, 0x00	; 0
 bba:	19 f1       	breq	.+70     	; 0xc02 <malloc+0x6c>
 bbc:	40 81       	ld	r20, Z
 bbe:	51 81       	ldd	r21, Z+1	; 0x01
 bc0:	02 81       	ldd	r16, Z+2	; 0x02
 bc2:	13 81       	ldd	r17, Z+3	; 0x03
 bc4:	48 17       	cp	r20, r24
 bc6:	59 07       	cpc	r21, r25
 bc8:	c8 f0       	brcs	.+50     	; 0xbfc <malloc+0x66>
 bca:	84 17       	cp	r24, r20
 bcc:	95 07       	cpc	r25, r21
 bce:	69 f4       	brne	.+26     	; 0xbea <malloc+0x54>
 bd0:	10 97       	sbiw	r26, 0x00	; 0
 bd2:	31 f0       	breq	.+12     	; 0xbe0 <malloc+0x4a>
 bd4:	12 96       	adiw	r26, 0x02	; 2
 bd6:	0c 93       	st	X, r16
 bd8:	12 97       	sbiw	r26, 0x02	; 2
 bda:	13 96       	adiw	r26, 0x03	; 3
 bdc:	1c 93       	st	X, r17
 bde:	27 c0       	rjmp	.+78     	; 0xc2e <malloc+0x98>
 be0:	00 93 79 03 	sts	0x0379, r16	; 0x800379 <__flp>
 be4:	10 93 7a 03 	sts	0x037A, r17	; 0x80037a <__flp+0x1>
 be8:	22 c0       	rjmp	.+68     	; 0xc2e <malloc+0x98>
 bea:	21 15       	cp	r18, r1
 bec:	31 05       	cpc	r19, r1
 bee:	19 f0       	breq	.+6      	; 0xbf6 <malloc+0x60>
 bf0:	42 17       	cp	r20, r18
 bf2:	53 07       	cpc	r21, r19
 bf4:	18 f4       	brcc	.+6      	; 0xbfc <malloc+0x66>
 bf6:	9a 01       	movw	r18, r20
 bf8:	bd 01       	movw	r22, r26
 bfa:	ef 01       	movw	r28, r30
 bfc:	df 01       	movw	r26, r30
 bfe:	f8 01       	movw	r30, r16
 c00:	db cf       	rjmp	.-74     	; 0xbb8 <malloc+0x22>
 c02:	21 15       	cp	r18, r1
 c04:	31 05       	cpc	r19, r1
 c06:	f9 f0       	breq	.+62     	; 0xc46 <malloc+0xb0>
 c08:	28 1b       	sub	r18, r24
 c0a:	39 0b       	sbc	r19, r25
 c0c:	24 30       	cpi	r18, 0x04	; 4
 c0e:	31 05       	cpc	r19, r1
 c10:	80 f4       	brcc	.+32     	; 0xc32 <malloc+0x9c>
 c12:	8a 81       	ldd	r24, Y+2	; 0x02
 c14:	9b 81       	ldd	r25, Y+3	; 0x03
 c16:	61 15       	cp	r22, r1
 c18:	71 05       	cpc	r23, r1
 c1a:	21 f0       	breq	.+8      	; 0xc24 <malloc+0x8e>
 c1c:	fb 01       	movw	r30, r22
 c1e:	93 83       	std	Z+3, r25	; 0x03
 c20:	82 83       	std	Z+2, r24	; 0x02
 c22:	04 c0       	rjmp	.+8      	; 0xc2c <malloc+0x96>
 c24:	90 93 7a 03 	sts	0x037A, r25	; 0x80037a <__flp+0x1>
 c28:	80 93 79 03 	sts	0x0379, r24	; 0x800379 <__flp>
 c2c:	fe 01       	movw	r30, r28
 c2e:	32 96       	adiw	r30, 0x02	; 2
 c30:	44 c0       	rjmp	.+136    	; 0xcba <malloc+0x124>
 c32:	fe 01       	movw	r30, r28
 c34:	e2 0f       	add	r30, r18
 c36:	f3 1f       	adc	r31, r19
 c38:	81 93       	st	Z+, r24
 c3a:	91 93       	st	Z+, r25
 c3c:	22 50       	subi	r18, 0x02	; 2
 c3e:	31 09       	sbc	r19, r1
 c40:	39 83       	std	Y+1, r19	; 0x01
 c42:	28 83       	st	Y, r18
 c44:	3a c0       	rjmp	.+116    	; 0xcba <malloc+0x124>
 c46:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <__brkval>
 c4a:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <__brkval+0x1>
 c4e:	23 2b       	or	r18, r19
 c50:	41 f4       	brne	.+16     	; 0xc62 <malloc+0xcc>
 c52:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 c56:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 c5a:	30 93 78 03 	sts	0x0378, r19	; 0x800378 <__brkval+0x1>
 c5e:	20 93 77 03 	sts	0x0377, r18	; 0x800377 <__brkval>
 c62:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 c66:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 c6a:	21 15       	cp	r18, r1
 c6c:	31 05       	cpc	r19, r1
 c6e:	41 f4       	brne	.+16     	; 0xc80 <malloc+0xea>
 c70:	2d b7       	in	r18, 0x3d	; 61
 c72:	3e b7       	in	r19, 0x3e	; 62
 c74:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 c78:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 c7c:	24 1b       	sub	r18, r20
 c7e:	35 0b       	sbc	r19, r21
 c80:	e0 91 77 03 	lds	r30, 0x0377	; 0x800377 <__brkval>
 c84:	f0 91 78 03 	lds	r31, 0x0378	; 0x800378 <__brkval+0x1>
 c88:	e2 17       	cp	r30, r18
 c8a:	f3 07       	cpc	r31, r19
 c8c:	a0 f4       	brcc	.+40     	; 0xcb6 <malloc+0x120>
 c8e:	2e 1b       	sub	r18, r30
 c90:	3f 0b       	sbc	r19, r31
 c92:	28 17       	cp	r18, r24
 c94:	39 07       	cpc	r19, r25
 c96:	78 f0       	brcs	.+30     	; 0xcb6 <malloc+0x120>
 c98:	ac 01       	movw	r20, r24
 c9a:	4e 5f       	subi	r20, 0xFE	; 254
 c9c:	5f 4f       	sbci	r21, 0xFF	; 255
 c9e:	24 17       	cp	r18, r20
 ca0:	35 07       	cpc	r19, r21
 ca2:	48 f0       	brcs	.+18     	; 0xcb6 <malloc+0x120>
 ca4:	4e 0f       	add	r20, r30
 ca6:	5f 1f       	adc	r21, r31
 ca8:	50 93 78 03 	sts	0x0378, r21	; 0x800378 <__brkval+0x1>
 cac:	40 93 77 03 	sts	0x0377, r20	; 0x800377 <__brkval>
 cb0:	81 93       	st	Z+, r24
 cb2:	91 93       	st	Z+, r25
 cb4:	02 c0       	rjmp	.+4      	; 0xcba <malloc+0x124>
 cb6:	e0 e0       	ldi	r30, 0x00	; 0
 cb8:	f0 e0       	ldi	r31, 0x00	; 0
 cba:	cf 01       	movw	r24, r30
 cbc:	df 91       	pop	r29
 cbe:	cf 91       	pop	r28
 cc0:	1f 91       	pop	r17
 cc2:	0f 91       	pop	r16
 cc4:	08 95       	ret

00000cc6 <free>:
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	00 97       	sbiw	r24, 0x00	; 0
 ccc:	09 f4       	brne	.+2      	; 0xcd0 <free+0xa>
 cce:	81 c0       	rjmp	.+258    	; 0xdd2 <free+0x10c>
 cd0:	fc 01       	movw	r30, r24
 cd2:	32 97       	sbiw	r30, 0x02	; 2
 cd4:	13 82       	std	Z+3, r1	; 0x03
 cd6:	12 82       	std	Z+2, r1	; 0x02
 cd8:	a0 91 79 03 	lds	r26, 0x0379	; 0x800379 <__flp>
 cdc:	b0 91 7a 03 	lds	r27, 0x037A	; 0x80037a <__flp+0x1>
 ce0:	10 97       	sbiw	r26, 0x00	; 0
 ce2:	81 f4       	brne	.+32     	; 0xd04 <free+0x3e>
 ce4:	20 81       	ld	r18, Z
 ce6:	31 81       	ldd	r19, Z+1	; 0x01
 ce8:	82 0f       	add	r24, r18
 cea:	93 1f       	adc	r25, r19
 cec:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <__brkval>
 cf0:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <__brkval+0x1>
 cf4:	28 17       	cp	r18, r24
 cf6:	39 07       	cpc	r19, r25
 cf8:	51 f5       	brne	.+84     	; 0xd4e <free+0x88>
 cfa:	f0 93 78 03 	sts	0x0378, r31	; 0x800378 <__brkval+0x1>
 cfe:	e0 93 77 03 	sts	0x0377, r30	; 0x800377 <__brkval>
 d02:	67 c0       	rjmp	.+206    	; 0xdd2 <free+0x10c>
 d04:	ed 01       	movw	r28, r26
 d06:	20 e0       	ldi	r18, 0x00	; 0
 d08:	30 e0       	ldi	r19, 0x00	; 0
 d0a:	ce 17       	cp	r28, r30
 d0c:	df 07       	cpc	r29, r31
 d0e:	40 f4       	brcc	.+16     	; 0xd20 <free+0x5a>
 d10:	4a 81       	ldd	r20, Y+2	; 0x02
 d12:	5b 81       	ldd	r21, Y+3	; 0x03
 d14:	9e 01       	movw	r18, r28
 d16:	41 15       	cp	r20, r1
 d18:	51 05       	cpc	r21, r1
 d1a:	f1 f0       	breq	.+60     	; 0xd58 <free+0x92>
 d1c:	ea 01       	movw	r28, r20
 d1e:	f5 cf       	rjmp	.-22     	; 0xd0a <free+0x44>
 d20:	d3 83       	std	Z+3, r29	; 0x03
 d22:	c2 83       	std	Z+2, r28	; 0x02
 d24:	40 81       	ld	r20, Z
 d26:	51 81       	ldd	r21, Z+1	; 0x01
 d28:	84 0f       	add	r24, r20
 d2a:	95 1f       	adc	r25, r21
 d2c:	c8 17       	cp	r28, r24
 d2e:	d9 07       	cpc	r29, r25
 d30:	59 f4       	brne	.+22     	; 0xd48 <free+0x82>
 d32:	88 81       	ld	r24, Y
 d34:	99 81       	ldd	r25, Y+1	; 0x01
 d36:	84 0f       	add	r24, r20
 d38:	95 1f       	adc	r25, r21
 d3a:	02 96       	adiw	r24, 0x02	; 2
 d3c:	91 83       	std	Z+1, r25	; 0x01
 d3e:	80 83       	st	Z, r24
 d40:	8a 81       	ldd	r24, Y+2	; 0x02
 d42:	9b 81       	ldd	r25, Y+3	; 0x03
 d44:	93 83       	std	Z+3, r25	; 0x03
 d46:	82 83       	std	Z+2, r24	; 0x02
 d48:	21 15       	cp	r18, r1
 d4a:	31 05       	cpc	r19, r1
 d4c:	29 f4       	brne	.+10     	; 0xd58 <free+0x92>
 d4e:	f0 93 7a 03 	sts	0x037A, r31	; 0x80037a <__flp+0x1>
 d52:	e0 93 79 03 	sts	0x0379, r30	; 0x800379 <__flp>
 d56:	3d c0       	rjmp	.+122    	; 0xdd2 <free+0x10c>
 d58:	e9 01       	movw	r28, r18
 d5a:	fb 83       	std	Y+3, r31	; 0x03
 d5c:	ea 83       	std	Y+2, r30	; 0x02
 d5e:	49 91       	ld	r20, Y+
 d60:	59 91       	ld	r21, Y+
 d62:	c4 0f       	add	r28, r20
 d64:	d5 1f       	adc	r29, r21
 d66:	ec 17       	cp	r30, r28
 d68:	fd 07       	cpc	r31, r29
 d6a:	61 f4       	brne	.+24     	; 0xd84 <free+0xbe>
 d6c:	80 81       	ld	r24, Z
 d6e:	91 81       	ldd	r25, Z+1	; 0x01
 d70:	84 0f       	add	r24, r20
 d72:	95 1f       	adc	r25, r21
 d74:	02 96       	adiw	r24, 0x02	; 2
 d76:	e9 01       	movw	r28, r18
 d78:	99 83       	std	Y+1, r25	; 0x01
 d7a:	88 83       	st	Y, r24
 d7c:	82 81       	ldd	r24, Z+2	; 0x02
 d7e:	93 81       	ldd	r25, Z+3	; 0x03
 d80:	9b 83       	std	Y+3, r25	; 0x03
 d82:	8a 83       	std	Y+2, r24	; 0x02
 d84:	e0 e0       	ldi	r30, 0x00	; 0
 d86:	f0 e0       	ldi	r31, 0x00	; 0
 d88:	12 96       	adiw	r26, 0x02	; 2
 d8a:	8d 91       	ld	r24, X+
 d8c:	9c 91       	ld	r25, X
 d8e:	13 97       	sbiw	r26, 0x03	; 3
 d90:	00 97       	sbiw	r24, 0x00	; 0
 d92:	19 f0       	breq	.+6      	; 0xd9a <free+0xd4>
 d94:	fd 01       	movw	r30, r26
 d96:	dc 01       	movw	r26, r24
 d98:	f7 cf       	rjmp	.-18     	; 0xd88 <free+0xc2>
 d9a:	8d 91       	ld	r24, X+
 d9c:	9c 91       	ld	r25, X
 d9e:	11 97       	sbiw	r26, 0x01	; 1
 da0:	9d 01       	movw	r18, r26
 da2:	2e 5f       	subi	r18, 0xFE	; 254
 da4:	3f 4f       	sbci	r19, 0xFF	; 255
 da6:	82 0f       	add	r24, r18
 da8:	93 1f       	adc	r25, r19
 daa:	20 91 77 03 	lds	r18, 0x0377	; 0x800377 <__brkval>
 dae:	30 91 78 03 	lds	r19, 0x0378	; 0x800378 <__brkval+0x1>
 db2:	28 17       	cp	r18, r24
 db4:	39 07       	cpc	r19, r25
 db6:	69 f4       	brne	.+26     	; 0xdd2 <free+0x10c>
 db8:	30 97       	sbiw	r30, 0x00	; 0
 dba:	29 f4       	brne	.+10     	; 0xdc6 <free+0x100>
 dbc:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <__flp+0x1>
 dc0:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <__flp>
 dc4:	02 c0       	rjmp	.+4      	; 0xdca <free+0x104>
 dc6:	13 82       	std	Z+3, r1	; 0x03
 dc8:	12 82       	std	Z+2, r1	; 0x02
 dca:	b0 93 78 03 	sts	0x0378, r27	; 0x800378 <__brkval+0x1>
 dce:	a0 93 77 03 	sts	0x0377, r26	; 0x800377 <__brkval>
 dd2:	df 91       	pop	r29
 dd4:	cf 91       	pop	r28
 dd6:	08 95       	ret

00000dd8 <_exit>:
 dd8:	f8 94       	cli

00000dda <__stop_program>:
 dda:	ff cf       	rjmp	.-2      	; 0xdda <__stop_program>
